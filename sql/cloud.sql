/*
Navicat MySQL Data Transfer

Source Server         : 60.205.176.66_3306
Source Server Version : 50552
Source Host           : 60.205.176.66:3306
Source Database       : cloud

Target Server Type    : MYSQL
Target Server Version : 50552
File Encoding         : 65001

Date: 2017-05-15 16:51:08
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for `courseIntroduction`
-- ----------------------------
DROP TABLE IF EXISTS `courseIntroduction`;
CREATE TABLE `courseIntroduction` (
  `id` int(11) NOT NULL,
  `className` varchar(255) DEFAULT NULL,
  `press` varchar(255) DEFAULT NULL,
  `iconUrl` varchar(255) DEFAULT NULL,
  `start` int(11) DEFAULT NULL,
  `Introduction` varchar(1000) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of courseIntroduction
-- ----------------------------
INSERT INTO `courseIntroduction` VALUES ('1', 'C语言程序设计', '出版社：人民邮电出版社', 'http://cloud-1253431508.costj.myqcloud.com/myImg/C.png', '5', '   对于计算机相关专业而言，程序设计是专业基础知识，是进一步学习其他专业知识的第一步阶梯；对于非计算机专业而言，程序设计的学习有助于理解计算机的能力所在，理解哪些是计算机擅长解决的问题，怎样的方式方法是计算机擅长的手段，从而能更好地利用计算机来解决本专业领域内的问题。\r\n     C语言是古老而长青的编程语言，它具备了现代程序设计的基础要求，它的语法是很多其他编程语言的基础，在系统程序、嵌入式系统等领域依然是无可替代的编程语言，在各类编程语言排行榜上常年占据前两名的位置。\r\n                对于非计算机专业的学生，学习本课程的主要目的是掌握程序设计的基本方法，C语言是教学媒介。但是对于计算机专业的学生，本课程是向后续的计算机组成、操作系统、编译原理、体系结构等课程前进的基石。\r\n                本课程是以C语言来讲授程序设计的入门知识，而非具体教授C语言，关于C语言的全面知识，还需要学习本课程的后续课程——“C语言程序设计进阶”。\r\n                   程序设计是实践性很强的课程，该课程的学习有其自身的特点，听不会，也看不会，只能练会。你必须通过大量的编程训练，在实践中掌握编程知识，培养编程能力，并逐步理解和掌握程序设计的思想和方法。在这里所提供的，只是基础的知识讲解，要想学会编程，还需要更多时间的投入和努力。\r\n                 为了学习编程，你需要有一台计算机，安装必要的编程软件。无论是MS Windows、Mac OS X还是Linux，都有适合C语言编程的软件。\r\n       ');
INSERT INTO `courseIntroduction` VALUES ('2', 'C#程序设计', '出版社： 电子工业出版社', 'http://cloud-1253431508.costj.myqcloud.com/myImg/C1.png', '5', '《C#程序设计及应用教程(第2版)》详细介绍C#程序设计及其应用技术。全书由C#程序设计基础、Windows应用程序设计和web应用程序设计三部分组成．主要内容包括C#言基础知识、面向对象的编程技术、Windows窗体控件、目录与文件管理、图形图像处理、ADONET、报表设计、类库与控件库设计以及Web应用程序开发。在内容深度的把握上，作者充分考虑了初学者的特点。在对相关知识进行系统介绍的同时，特别注重解决初学者刚开始参与项目开发时容易迷惑的问题，重点讲解容易混淆的概念．对相关知识的介绍简洁、清晰、重点明确，真正起到了画龙点睛的作用。同时．对于比较常用的内容，都有配套的例子和源程序。在内容的安排上，全书的每一个细节。几乎都贯穿了以读者为主体．以知识点为主线，以锻炼动手能力为手段-以解决实际问题为目标的思想。\r\n       ');
INSERT INTO `courseIntroduction` VALUES ('3', '数据结构', '出版社： 清华大学出版社', 'http://cloud-1253431508.costj.myqcloud.com/myImg/shujujiegou.png', '5', '《数据结构》（C语言版）是为“数据结构”课程编写的教材，也可作为学习数据结构及其算法的C程序设计的参数教材。学了数据结构后,许多以前写起来很繁杂的代码现在写起来很清晰明了. 本书的前半部分从抽象数据类型的角度讨论各种基本类型的数据结构及其应用；后半部分主要讨论查找和排序的各种实现方法及其综合分析比较。 全书采用类C语言作为数据结构和算法的描述语言。 本书概念表述严谨，逻辑推理严密，语言精炼，用词达意，并有配套出版的《数据结构题集》（C语言版），便于教学，又便于自学。 本书后附有光盘。光盘内容可在DOS环境下运行的以类C语言描述的“数据结构算法动态模拟辅助教学软件，以及在Windows环境下运行的以类PASCAL或类C两种语言描述的“数据结构算法动态模拟辅助教学软件”。\r\n                ');
INSERT INTO `courseIntroduction` VALUES ('4', 'JavaScript前端开发使用技术教程', '出版社： 人民电邮出版社', 'http://cloud-1253431508.costj.myqcloud.com/myImg/JS.png', '5', '本书从实际开发的角度，全面介绍了编程的基础知识和实用技术。全书内容分基础篇、进阶篇和高级篇，包括Web前端开发技术概述、语言基础、函数应用、面向对象程序设计、事件处理、表单编程、CSS编程、Ajax编程、HTML5编程、jQuery，最后还介绍了特效应用实例，包括提示条和工具栏、页面显示特效、图片展示和菜单设计等。 本书既可作为大学本、专科“Web应用程序设计”课程的教材，也可作为高职高专院校相关专业的教材，还可作为Web应用程序开发人员的参考用书。');
INSERT INTO `courseIntroduction` VALUES ('5', 'JAVA语言程序设计', '出版社： 机械工业出版社', 'http://cloud-1253431508.costj.myqcloud.com/myImg/JAVA.png', '5', '《Java程序开发大全:基于MyEclipse平台+Struts+Hibernate+Spring主流框架开发》系统全面地介绍了Java中的各项主流技术，以及基于这些技术的商业化应用程序的开发技巧，在讲解过程中以目前最为流行的开发工具My Eclips为载体，全面系统地介绍了如何在My Eclipse中开发基于Struts、。Hibernate、Spring等主流框架的各种Java应用程序。\r\n     《Java程序开发大全:基于MyEclipse平台+Struts+Hibernate+Spring主流框架开发》内容主要来自作者多年的软件开发和教学、培训经验，通过实例由浅入深地介绍My Eelilase的基本应用，是一本强调实践技能的实用性指导图书。<br/></p>\r\n     《Java程序开发大全:基于MyEclipse平台+Struts+Hibernate+Spring主流框架开发》内容丰富、技术全面、案例实用，而且所有的实例都以My Eelipse工程的形式组织，并按章节的顺序组织在附书光盘中，源代码工程都经过精心调试，可以直接导八My Eelipse中运行《Java程序开发大全:基于MyEclipse平台+Struts+Hibernate+Spring主流框架开发》内容精练、重点突出、实例丰富，是Java程序开发人员必备的参考书同，同时也可作为高等院校计算机及相关专业的教材。\r\n    ');
INSERT INTO `courseIntroduction` VALUES ('6', '软件工程开发', '出版社： 清华大学出版社', 'http://cloud-1253431508.costj.myqcloud.com/myImg/soft.png', '5', '《软件工程项目驱动式教程》针对软件开发职业岗位的从业需求，系统化重构教学内容，以真实软件项目的开发过程为主线设计教学单元，达到学以致用的目标。\r\n                根据软件岗位需求和软件项目开发的过程，将教学内容划分为7个单元：软件项目开发的立项与启动→软件项目的分析与建模→软件项目的概要设计与详细设计→软件项目的编码实现与单元测试→软件项目的综合测试与验收→软件系统的运行与维护→软件项目的管理与安全保障。每个教学单元面向教学全过程设置了7个必要的教学环节：知识梳理→方法指导→模板预览→项目实战→小试牛刀→单元小结→单元习题，教学实施过程整体上按照理论指导→实战体验→训练提升的进程组织教学。本书以真实的软件系统为教学案例，优选了3个软件项目（人力资源管理系统，进、销、存管理系统，图书管理系统）作为教学项目，精心设置了近50项软件工程教学任务和部分综合实训任务，在完成各项具体开发任务过程中学习知识、训练技能、积累经验、固化能力。\r\n                本书可以作为本科院校和高等职业院校计算机类各专业以及其他各相关专业的教材和参考书，也可以作为从事软件系统开发的技术人员和管理人员的参考书。\r\n');
INSERT INTO `courseIntroduction` VALUES ('7', 'Android程序开发', '出版社： 清华大学出版社', 'http://cloud-1253431508.costj.myqcloud.com/myImg/android.png', '5', '本课程将介绍基于android平台上的应用开发，课程分为六个模块，分别涉及android平台概述和其基本构件、初次编写android应用程序及接收和显示网络数据等内容。通过本课程，你将很好地了解android平台，了解如何运用android平台，以及进一步研究该平台的学习方向。');
INSERT INTO `courseIntroduction` VALUES ('8', '算法导论', '出版社： 机械工业出版社', 'http://cloud-1253431508.costj.myqcloud.com/myImg/suanfa.png', '5', '《算法导论》自第一版出版以来，已经成为世界范围内广泛使用的大学教材和专业人员的标准参考手册。本书全面论述了算法的内容，从一定深度上涵盖了算法的诸多方面，同时其讲授和分析方法又兼顾了各个层次读者的接受能力。各章内容自成体系，可作为独立单元学习。所有算法都用英文和伪码描述，使具备初步编程经验的人也可读懂。全书讲解通俗易懂，且不失深度和数学上的严谨性。 \r\n               本书深入浅出，全面地介绍了计算机算法。对每一个算法的分析既易于理解又十分有趣，并保持了数学严谨性。本书的设计目标全面，适用于多种用途。涵盖的内容有：算法在计算中的作用，概率分析和随机算法的介绍。本书专门讨论了线性规划，介绍了动态规划的两个应用，随机化和线性规划技术的近似算法等，还有有关递归求解、快速排序中用到的划分方法与期望线性时间顺序统计算法，以及对贪心算法元素的讨论。本书还介绍了对强连通子图算法正确性的证明，对哈密顿回路和子集求和问题的NP完全性的证明等内容。');
INSERT INTO `courseIntroduction` VALUES ('9', '其他课程', '暂无', 'http://cloud-1253431508.costj.myqcloud.com/myImg/else.png', '0', '你可以选择创建/加入其他类型的课程活动');

-- ----------------------------
-- Table structure for `createClassActivity`
-- ----------------------------
DROP TABLE IF EXISTS `createClassActivity`;
CREATE TABLE `createClassActivity` (
  `activityId` int(11) NOT NULL,
  `teacherId` int(11) NOT NULL,
  `questionsId` int(255) DEFAULT NULL,
  `testType` varchar(255) DEFAULT NULL,
  `unit` int(255) DEFAULT NULL,
  `section` int(255) DEFAULT NULL,
  `signIn` varchar(255) DEFAULT NULL,
  `chatRoom` varchar(255) DEFAULT NULL,
  `onlineTest` varchar(255) DEFAULT NULL,
  `eduEvaluate` varchar(255) DEFAULT NULL,
  `startTime` datetime DEFAULT NULL,
  `endTime` datetime DEFAULT NULL,
  `address` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`activityId`),
  KEY `testBuilder` (`teacherId`),
  KEY `questionsId` (`questionsId`),
  CONSTRAINT `testBuilder` FOREIGN KEY (`teacherId`) REFERENCES `teacherUser` (`teacherId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of createClassActivity
-- ----------------------------
INSERT INTO `createClassActivity` VALUES ('103117', '1', '200', 'Java', '0', '0', '1', '1', '0', '0', '2017-04-30 00:00:00', null, null);
INSERT INTO `createClassActivity` VALUES ('103647', '1', '200', 'Java', '0', '0', '1', '1', '0', '0', '2017-04-30 10:36:47', null, null);
INSERT INTO `createClassActivity` VALUES ('221864', '58', '200', 'Java', '0', '0', '1', '1', '1', '1', '2017-04-29 00:00:00', null, null);
INSERT INTO `createClassActivity` VALUES ('330912', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 19:58:55', null, null);
INSERT INTO `createClassActivity` VALUES ('334735', '39', '200', 'Java', '0', '0', null, 'false', null, '1', '2017-05-01 22:21:17', null, null);
INSERT INTO `createClassActivity` VALUES ('465713', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 15:48:31', null, null);
INSERT INTO `createClassActivity` VALUES ('566955', '1', '200', 'Java', '0', '0', null, 'true', null, 'true', '2017-05-02 10:14:40', null, null);
INSERT INTO `createClassActivity` VALUES ('573526', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 21:54:42', null, null);
INSERT INTO `createClassActivity` VALUES ('589633', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 21:49:44', null, null);
INSERT INTO `createClassActivity` VALUES ('598874', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 21:32:02', null, null);
INSERT INTO `createClassActivity` VALUES ('681919', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-04-30 23:12:38', null, null);
INSERT INTO `createClassActivity` VALUES ('687983', '1', '200', 'Java', '0', '0', null, 'true', null, 'true', '2017-05-01 23:16:46', null, null);
INSERT INTO `createClassActivity` VALUES ('726990', '39', '200', 'Java', '0', '0', null, 'true', null, 'true', '2017-05-01 23:05:44', null, null);
INSERT INTO `createClassActivity` VALUES ('761751', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 19:58:49', null, null);
INSERT INTO `createClassActivity` VALUES ('796839', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 09:21:25', null, null);
INSERT INTO `createClassActivity` VALUES ('909100', '39', '200', 'Java', '0', '0', null, 'false', null, '1', '2017-05-01 16:40:13', null, null);
INSERT INTO `createClassActivity` VALUES ('915222', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 20:40:05', null, null);
INSERT INTO `createClassActivity` VALUES ('1028799', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 15:37:19', null, null);
INSERT INTO `createClassActivity` VALUES ('1078351', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 21:08:28', null, null);
INSERT INTO `createClassActivity` VALUES ('1235953', '39', '200', 'Java', '0', '0', null, 'false', null, '1', '2017-05-01 16:30:36', null, null);
INSERT INTO `createClassActivity` VALUES ('1237916', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 21:06:34', null, null);
INSERT INTO `createClassActivity` VALUES ('1256952', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 16:04:53', null, null);
INSERT INTO `createClassActivity` VALUES ('1260841', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 10:07:15', null, null);
INSERT INTO `createClassActivity` VALUES ('1276062', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-04-30 22:16:35', null, null);
INSERT INTO `createClassActivity` VALUES ('1287493', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 21:05:43', null, null);
INSERT INTO `createClassActivity` VALUES ('1306598', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 15:29:09', null, null);
INSERT INTO `createClassActivity` VALUES ('1328519', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 21:05:53', null, null);
INSERT INTO `createClassActivity` VALUES ('1353351', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 19:05:15', null, null);
INSERT INTO `createClassActivity` VALUES ('1405398', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-04-30 22:03:14', null, null);
INSERT INTO `createClassActivity` VALUES ('1450148', '1', '200', 'Java', '0', '0', null, 'true', null, 'true', '2017-05-02 10:52:50', null, null);
INSERT INTO `createClassActivity` VALUES ('1475455', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 20:38:25', null, null);
INSERT INTO `createClassActivity` VALUES ('1484223', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 20:42:49', null, null);
INSERT INTO `createClassActivity` VALUES ('1517544', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 19:03:25', null, null);
INSERT INTO `createClassActivity` VALUES ('1551549', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-04-30 21:56:30', null, null);
INSERT INTO `createClassActivity` VALUES ('1581404', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 09:42:27', null, null);
INSERT INTO `createClassActivity` VALUES ('1663692', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 15:46:07', null, null);
INSERT INTO `createClassActivity` VALUES ('1709978', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 22:16:40', null, null);
INSERT INTO `createClassActivity` VALUES ('1746008', '39', '200', 'Java', '0', '0', null, '1', null, 'false', '2017-05-01 16:42:43', null, null);
INSERT INTO `createClassActivity` VALUES ('1779981', '1', '200', 'Java', '0', '0', null, 'true', null, 'true', '2017-05-01 22:48:41', null, null);
INSERT INTO `createClassActivity` VALUES ('1802310', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-04-30 23:14:28', null, null);
INSERT INTO `createClassActivity` VALUES ('1884707', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 20:36:53', null, null);
INSERT INTO `createClassActivity` VALUES ('2060525', '1', '200', 'Java', '0', '0', null, 'true', null, 'true', '2017-05-02 10:51:32', null, null);
INSERT INTO `createClassActivity` VALUES ('2155150', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 16:37:56', null, null);
INSERT INTO `createClassActivity` VALUES ('2192804', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 09:48:39', null, null);
INSERT INTO `createClassActivity` VALUES ('2222135', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 20:39:43', null, null);
INSERT INTO `createClassActivity` VALUES ('2254998', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-04-30 21:56:30', null, null);
INSERT INTO `createClassActivity` VALUES ('2262844', '1', '200', 'Java', '0', '0', null, 'true', null, 'true', '2017-05-01 23:13:19', null, null);
INSERT INTO `createClassActivity` VALUES ('2333930', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-04-30 21:56:31', null, null);
INSERT INTO `createClassActivity` VALUES ('2607334', '1', '200', 'Java', '0', '0', null, 'true', null, 'true', '2017-05-02 09:04:25', null, null);
INSERT INTO `createClassActivity` VALUES ('2672329', '1', '200', 'Java', '0', '0', null, 'true', null, 'true', '2017-05-02 11:04:12', null, null);
INSERT INTO `createClassActivity` VALUES ('2697511', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 19:43:44', null, null);
INSERT INTO `createClassActivity` VALUES ('2758090', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 19:47:49', null, null);
INSERT INTO `createClassActivity` VALUES ('2760901', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 14:06:33', null, null);
INSERT INTO `createClassActivity` VALUES ('2888804', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-04-30 22:03:06', null, null);
INSERT INTO `createClassActivity` VALUES ('3028885', '39', '200', 'Java', '0', '0', null, '1', null, 'false', '2017-05-01 20:11:15', null, null);
INSERT INTO `createClassActivity` VALUES ('3149205', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-04-30 21:56:30', null, null);
INSERT INTO `createClassActivity` VALUES ('3149800', '39', '200', 'Java', '0', '0', null, '1', null, 'false', '2017-05-01 19:55:06', null, null);
INSERT INTO `createClassActivity` VALUES ('3152006', '1', '200', 'Java', '0', '0', null, 'true', null, 'true', '2017-05-02 09:00:16', null, null);
INSERT INTO `createClassActivity` VALUES ('3176255', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 20:28:11', null, null);
INSERT INTO `createClassActivity` VALUES ('3195995', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 16:05:33', null, null);
INSERT INTO `createClassActivity` VALUES ('3244244', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-04-30 21:49:18', null, null);
INSERT INTO `createClassActivity` VALUES ('3280486', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-04-30 21:49:10', null, null);
INSERT INTO `createClassActivity` VALUES ('3316123', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-04-30 21:56:28', null, null);
INSERT INTO `createClassActivity` VALUES ('3357495', '1', '200', 'Java', '0', '0', null, 'false', null, '0', '2017-05-02 08:59:38', null, null);
INSERT INTO `createClassActivity` VALUES ('3410996', '39', '200', 'Java', '0', '0', null, 'false', null, 'false', '2017-05-01 21:03:52', null, null);
INSERT INTO `createClassActivity` VALUES ('3506913', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 20:37:30', null, null);
INSERT INTO `createClassActivity` VALUES ('3544628', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 19:40:31', null, null);
INSERT INTO `createClassActivity` VALUES ('3568985', '39', '200', 'Java', '0', '0', null, 'true', null, 'true', '2017-05-02 09:43:18', null, null);
INSERT INTO `createClassActivity` VALUES ('3575355', '39', '200', 'Java', '0', '0', null, 'true', null, 'true', '2017-05-01 23:04:01', null, null);
INSERT INTO `createClassActivity` VALUES ('3725023', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 19:04:04', null, null);
INSERT INTO `createClassActivity` VALUES ('3773361', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 09:47:00', null, null);
INSERT INTO `createClassActivity` VALUES ('3814772', '39', '200', 'Java', '0', '0', null, 'true', null, 'true', '2017-05-01 20:42:39', null, null);
INSERT INTO `createClassActivity` VALUES ('3870235', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 22:28:42', null, null);
INSERT INTO `createClassActivity` VALUES ('4009102', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 13:56:56', null, null);
INSERT INTO `createClassActivity` VALUES ('4033700', '1', '200', 'Java', '0', '0', null, 'true', null, 'true', '2017-05-02 09:11:40', null, null);
INSERT INTO `createClassActivity` VALUES ('4129535', '1', '200', 'Java', '0', '0', null, null, null, null, '2017-04-30 15:00:59', null, null);
INSERT INTO `createClassActivity` VALUES ('4170953', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-04-30 22:11:37', null, null);
INSERT INTO `createClassActivity` VALUES ('4179620', '1', '200', 'Java', '0', '0', null, 'true', null, 'true', '2017-05-02 10:53:25', null, null);
INSERT INTO `createClassActivity` VALUES ('4223829', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 14:07:54', null, null);
INSERT INTO `createClassActivity` VALUES ('4269150', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 09:39:02', null, null);
INSERT INTO `createClassActivity` VALUES ('4334702', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 09:15:44', null, null);
INSERT INTO `createClassActivity` VALUES ('4414131', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-04-30 21:56:32', null, null);
INSERT INTO `createClassActivity` VALUES ('4428424', '1', '200', 'Java', '0', '0', null, 'true', null, 'true', '2017-05-02 08:59:26', null, null);
INSERT INTO `createClassActivity` VALUES ('4452735', '1', '200', 'Java', '0', '0', null, 'true', null, 'true', '2017-05-02 09:01:40', null, null);
INSERT INTO `createClassActivity` VALUES ('4573005', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 09:13:05', null, null);
INSERT INTO `createClassActivity` VALUES ('4627211', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 09:18:13', null, null);
INSERT INTO `createClassActivity` VALUES ('4776396', '1', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 19:07:39', null, null);
INSERT INTO `createClassActivity` VALUES ('4846136', '39', '200', 'Java', '0', '0', null, 'true', null, 'true', '2017-05-01 20:27:20', null, null);
INSERT INTO `createClassActivity` VALUES ('4909808', '1', '200', 'Java', '0', '0', '1', '1', '0', '0', '2017-04-30 20:45:28', null, null);
INSERT INTO `createClassActivity` VALUES ('4913357', '39', '200', 'Java', '0', '0', null, 'false', null, 'false', '2017-05-01 16:42:30', null, null);
INSERT INTO `createClassActivity` VALUES ('4970392', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-04-30 22:28:41', null, null);
INSERT INTO `createClassActivity` VALUES ('5017539', '39', '200', 'Java', '0', '0', null, 'false', null, '1', '2017-05-01 16:42:10', null, null);
INSERT INTO `createClassActivity` VALUES ('5127827', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 20:00:34', null, null);
INSERT INTO `createClassActivity` VALUES ('5152417', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 20:37:56', null, null);
INSERT INTO `createClassActivity` VALUES ('5181798', '1', '200', 'Java', '0', '0', null, 'true', null, 'true', '2017-05-01 22:46:08', null, null);
INSERT INTO `createClassActivity` VALUES ('5208118', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 21:07:50', null, null);
INSERT INTO `createClassActivity` VALUES ('5224099', '39', '200', 'Java', '0', '0', null, 'false', null, '1', '2017-05-01 16:31:49', null, null);
INSERT INTO `createClassActivity` VALUES ('5225342', '39', '200', 'Java', '0', '0', null, 'false', null, '1', '2017-05-01 16:34:45', null, null);
INSERT INTO `createClassActivity` VALUES ('5238145', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 22:18:18', null, null);
INSERT INTO `createClassActivity` VALUES ('5291326', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 21:50:28', null, null);
INSERT INTO `createClassActivity` VALUES ('5344578', '1', '200', 'Java', '0', '0', null, 'true', null, 'true', '2017-05-02 11:30:34', null, null);
INSERT INTO `createClassActivity` VALUES ('5490940', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-04-30 22:05:37', null, null);
INSERT INTO `createClassActivity` VALUES ('5501334', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 10:18:44', null, null);
INSERT INTO `createClassActivity` VALUES ('5541466', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-04-30 22:30:02', null, null);
INSERT INTO `createClassActivity` VALUES ('5560120', '1', '200', 'Java', '0', '0', null, 'true', null, 'true', '2017-05-02 08:58:31', null, null);
INSERT INTO `createClassActivity` VALUES ('5608674', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 10:08:45', null, null);
INSERT INTO `createClassActivity` VALUES ('5630234', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-04-30 22:34:51', null, null);
INSERT INTO `createClassActivity` VALUES ('5650836', '39', '200', 'Java', '0', '0', null, 'false', null, '1', '2017-05-01 16:27:59', null, null);
INSERT INTO `createClassActivity` VALUES ('5675863', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 22:28:55', null, null);
INSERT INTO `createClassActivity` VALUES ('5676951', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 10:19:18', null, null);
INSERT INTO `createClassActivity` VALUES ('5718011', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 22:17:36', null, null);
INSERT INTO `createClassActivity` VALUES ('5743058', '1', '200', 'Java', '0', '0', '1', '1', '0', '0', '2017-04-30 15:54:31', null, null);
INSERT INTO `createClassActivity` VALUES ('5888150', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-04-30 21:56:29', null, null);
INSERT INTO `createClassActivity` VALUES ('5950617', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-04-30 21:56:32', null, null);
INSERT INTO `createClassActivity` VALUES ('6092226', '1', '200', 'Java', '0', '0', null, null, null, null, '2017-04-30 20:22:16', null, null);
INSERT INTO `createClassActivity` VALUES ('6123717', '39', '200', 'Java', '0', '0', null, 'false', null, 'false', '2017-05-01 22:21:53', null, null);
INSERT INTO `createClassActivity` VALUES ('6162848', '1', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 22:49:11', null, null);
INSERT INTO `createClassActivity` VALUES ('6235295', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 21:09:16', null, null);
INSERT INTO `createClassActivity` VALUES ('6242494', '39', '200', 'Java', '0', '0', null, '1', null, 'false', '2017-05-01 20:06:21', null, null);
INSERT INTO `createClassActivity` VALUES ('6258425', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 10:06:04', null, null);
INSERT INTO `createClassActivity` VALUES ('6284209', '39', '200', 'Java', '0', '0', null, 'false', null, '1', '2017-05-01 16:29:09', null, null);
INSERT INTO `createClassActivity` VALUES ('6287864', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 19:03:44', null, null);
INSERT INTO `createClassActivity` VALUES ('6419350', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 10:03:34', null, null);
INSERT INTO `createClassActivity` VALUES ('6428457', '39', '200', 'Java', '0', '0', null, 'false', null, '1', '2017-05-01 16:38:58', null, null);
INSERT INTO `createClassActivity` VALUES ('6433542', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 09:30:48', null, null);
INSERT INTO `createClassActivity` VALUES ('6473380', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 10:11:56', null, null);
INSERT INTO `createClassActivity` VALUES ('6492667', '1', '200', 'Java', '0', '0', null, '1', null, '1', '2017-04-30 22:20:22', null, null);
INSERT INTO `createClassActivity` VALUES ('6542752', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-04-30 21:56:29', null, null);
INSERT INTO `createClassActivity` VALUES ('6586390', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 10:01:22', null, null);
INSERT INTO `createClassActivity` VALUES ('6623457', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 21:07:37', null, null);
INSERT INTO `createClassActivity` VALUES ('6627018', '39', '200', 'Java', '0', '0', null, '1', null, '1', '2017-05-01 22:22:00', null, null);
INSERT INTO `createClassActivity` VALUES ('6648099', '1', '200', 'Java', '0', '0', null, 'false', null, 'false', '2017-05-01 22:45:12', null, null);

-- ----------------------------
-- Table structure for `electiveMajor`
-- ----------------------------
DROP TABLE IF EXISTS `electiveMajor`;
CREATE TABLE `electiveMajor` (
  `electiveMajorid` int(11) NOT NULL,
  `subject` varchar(255) DEFAULT NULL,
  `credit` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`electiveMajorid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of electiveMajor
-- ----------------------------

-- ----------------------------
-- Table structure for `examinationPaper`
-- ----------------------------
DROP TABLE IF EXISTS `examinationPaper`;
CREATE TABLE `examinationPaper` (
  `questionsId` int(11) NOT NULL AUTO_INCREMENT,
  `teacherId` int(11) DEFAULT NULL,
  `questionId1` int(11) DEFAULT NULL,
  `questionId2` int(11) DEFAULT NULL,
  `questionId3` int(11) DEFAULT NULL,
  `questionId4` int(11) DEFAULT NULL,
  `questionId5` int(11) DEFAULT NULL,
  `questionId6` int(11) DEFAULT NULL,
  `questionId7` int(11) DEFAULT NULL,
  `questionId8` int(11) DEFAULT NULL,
  `questionId9` int(11) DEFAULT NULL,
  `questionId10` int(11) DEFAULT NULL,
  `questionId11` int(11) DEFAULT NULL,
  `questionId12` int(11) DEFAULT NULL,
  `questionId13` int(11) DEFAULT NULL,
  `questionId14` int(11) DEFAULT NULL,
  `questionId15` int(11) DEFAULT NULL,
  `questionId16` int(11) DEFAULT NULL,
  `questionId17` int(11) DEFAULT NULL,
  `questionId18` int(11) DEFAULT NULL,
  `questionId19` int(11) DEFAULT NULL,
  `questionId20` int(11) DEFAULT NULL,
  `questionId21` int(11) DEFAULT NULL,
  `questionId22` int(11) DEFAULT NULL,
  `questionId23` int(11) DEFAULT NULL,
  `questionId24` int(11) DEFAULT NULL,
  `questionId25` int(11) DEFAULT NULL,
  `questionId26` int(11) DEFAULT NULL,
  `questionId27` int(11) DEFAULT NULL,
  `questionId28` int(11) DEFAULT NULL,
  `questionId29` int(11) DEFAULT NULL,
  `questionId30` int(11) DEFAULT NULL,
  `registTime` datetime DEFAULT NULL,
  PRIMARY KEY (`questionsId`)
) ENGINE=InnoDB AUTO_INCREMENT=6304 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of examinationPaper
-- ----------------------------
INSERT INTO `examinationPaper` VALUES ('4', null, '1', '41', '41', '15', '35', '45', null, null, '1', null, '1', '45', '17', '554', null, '165', null, null, null, '154', null, null, null, '15', null, null, null, null, '145', null, null);
INSERT INTO `examinationPaper` VALUES ('200', null, '1200000001', '1200000002', '1200000011', '1200000003', '1200000004', '1200000005', '1200000006', '1200000007', '1200000012', '1200000013', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
INSERT INTO `examinationPaper` VALUES ('201', null, '1', '41', '41', '15', '35', '45', null, null, '1', null, '1', '45', '17', '554', null, '165', null, null, null, '154', null, null, null, '15', null, null, null, null, '145', null, null);
INSERT INTO `examinationPaper` VALUES ('6267', null, '131212140', '131212141', '131212142', '131212143', '131212144', '131212145', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
INSERT INTO `examinationPaper` VALUES ('6268', null, '151212146', '151212147', '151212148', '151212149', '151212150', '151212151', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
INSERT INTO `examinationPaper` VALUES ('6284', null, '121221152', '121221153', '121221154', '121221155', '121221156', '121221157', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
INSERT INTO `examinationPaper` VALUES ('6285', null, '121212158', '121212159', '121212160', '121212161', '121212162', '121212163', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
INSERT INTO `examinationPaper` VALUES ('6286', null, '130101164', '130101165', '130101166', '130101167', '130101168', '130101169', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
INSERT INTO `examinationPaper` VALUES ('6287', null, '111212170', '111212171', '111212172', '111212173', '111212174', '111212175', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
INSERT INTO `examinationPaper` VALUES ('6288', null, '120102182', '120102183', '120102184', '120102185', '120102186', '120102187', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
INSERT INTO `examinationPaper` VALUES ('6289', '1', '120203188', '120203189', '120203190', '120203191', '120203192', '120203193', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, '2017-04-28 00:00:00');
INSERT INTO `examinationPaper` VALUES ('6290', '1', '141215194', '141215195', '141215196', '141215197', '141215198', '141215199', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, '2017-04-28 00:00:00');
INSERT INTO `examinationPaper` VALUES ('6291', '1', '120101200', '120101201', '120101202', '120101203', '120101204', '120101205', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, '2017-04-29 00:00:00');
INSERT INTO `examinationPaper` VALUES ('6292', '1', '1201011106', '1201011107', '1201011108', '1201011109', '1201011110', '1201011111', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, '2017-05-01 16:14:37');
INSERT INTO `examinationPaper` VALUES ('6293', '1', '1301021112', '1301021113', '1301021114', '1301021115', '1301021116', '1301021117', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, '2017-05-01 16:16:52');
INSERT INTO `examinationPaper` VALUES ('6294', '1', '1201011118', '1201011119', '1201011120', '1201011121', '1201011122', '1201011123', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, '2017-05-01 16:18:41');
INSERT INTO `examinationPaper` VALUES ('6295', '1', '1802021124', '1802021125', '1802021126', '1802021127', '1802021128', '1802021129', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, '2017-05-01 16:25:12');
INSERT INTO `examinationPaper` VALUES ('6296', '1', '1301021130', '1301021131', '1301021132', '1301021133', '1301021134', '1301021135', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, '2017-05-01 16:32:22');
INSERT INTO `examinationPaper` VALUES ('6297', '1', '1402021136', '1402021137', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, '2017-05-01 16:38:34');
INSERT INTO `examinationPaper` VALUES ('6298', '1', '1121211138', '1121211139', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, '2017-05-01 16:39:22');
INSERT INTO `examinationPaper` VALUES ('6299', '1', '1201211140', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, '2017-05-01 16:39:52');
INSERT INTO `examinationPaper` VALUES ('6300', '1', '1202021141', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, '2017-05-01 16:41:12');
INSERT INTO `examinationPaper` VALUES ('6301', '1', '1802021142', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, '2017-05-01 16:42:21');
INSERT INTO `examinationPaper` VALUES ('6302', '1', '1401021143', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, '2017-05-01 16:43:18');
INSERT INTO `examinationPaper` VALUES ('6303', '1', '1901021144', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, '2017-05-01 20:56:49');

-- ----------------------------
-- Table structure for `mainMajor`
-- ----------------------------
DROP TABLE IF EXISTS `mainMajor`;
CREATE TABLE `mainMajor` (
  `mianMajorId` int(11) NOT NULL,
  `subject` varchar(255) DEFAULT NULL,
  `credit` int(11) DEFAULT NULL,
  PRIMARY KEY (`mianMajorId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of mainMajor
-- ----------------------------

-- ----------------------------
-- Table structure for `questionBank`
-- ----------------------------
DROP TABLE IF EXISTS `questionBank`;
CREATE TABLE `questionBank` (
  `qid` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `pdId` int(30) NOT NULL,
  `answerType` int(11) DEFAULT NULL,
  `testType` varchar(500) DEFAULT NULL,
  `questionTitle` varchar(500) DEFAULT NULL,
  `A` varchar(500) DEFAULT NULL,
  `B` varchar(500) DEFAULT NULL,
  `C` varchar(500) DEFAULT NULL,
  `D` varchar(500) DEFAULT NULL,
  `E` varchar(500) DEFAULT NULL,
  `F` varchar(500) DEFAULT NULL,
  `G` varchar(500) DEFAULT NULL,
  `answer` varchar(500) DEFAULT NULL,
  `analysis` varchar(500) DEFAULT NULL,
  `teacherId` int(11) DEFAULT NULL,
  `rightTimes` int(11) DEFAULT NULL,
  `errorTimes` int(11) DEFAULT NULL,
  `accuracy` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`qid`),
  KEY `teacherId` (`teacherId`)
) ENGINE=InnoDB AUTO_INCREMENT=671 DEFAULT CHARSET=gbk;

-- ----------------------------
-- Records of questionBank
-- ----------------------------
INSERT INTO `questionBank` VALUES ('3', '1100000001', '1', 'c', '有以下程序\n#include <stdio. h>\nmain()\n{ \n    int c[6] = {10,20,30,40,50,60}, * p, * s;\n    p = c; \n    s = &c[5];\n    printf(\"%d\\n\", s-p );\n}\n程序运行后的输出结果是？', '5', '50', '6', '60', '', '', '', 'A', '本题主要考查数组和指针。首先初始化一维数组c[ 6 ],语句p = c;指将c[ 0 ]元素的地址赋给指针变量p;语句s = &c[ 5 ];指将c[ 5 ]元素的地址赋给指针变量s。程序最后输出s – p,即结果为5', '1', '7', '3', '70.00%');
INSERT INTO `questionBank` VALUES ('4', '1100000002', '1', 'c', '下面哪种情况下,B不能隐式转换为A?', 'class B:public A{}', 'class A:public B{}', 'class B{operator A();}', 'class A{A(const B&);}', '', '', '', 'B', '（A）A是基类，B是派生类，在公有继承方式下，派生类对象/对象指针、对象引用可以赋值给基类的对象/对象指针/对象引用（这时发生隐式转换）。因为派生类中包含了基类中的所有信息。注意：将派生类对象赋值给基类对象，会造成截切问题（派生类中专属的数据和行为会被丢弃掉）\n（B）A是派生类，B是基类。基类对象对象指针、对象引用不能赋值给派生类的对象/ 对象指针、对象引用。原因同上。\n（C） operator A()是B类中的一个类型转换函数，可以将B类对象隐式转换成B类对象。\n（D）A(const B&)是A类的一个', '1', '8', '1', '88.88%');
INSERT INTO `questionBank` VALUES ('5', '1100000003', '1', 'c', '下列哪个用法那个是错误的（ ）', 'typedef void (*FUN)();', 'const int &ra;', 'extern const int array[256];', 'int* a;', '', '', '', 'B', '1', '1', '4', '1', '80.00%');
INSERT INTO `questionBank` VALUES ('6', '1100000004', '1', 'c', '阅读以下程序：\nmain()\n{\n    int x;\n    scanf(“ % d”, &x);\n    if (x-- < 5)printf(“ % d”, x);\n    else printf(“ % d”, x++);\n}\n程序运行后，如果从键盘上输入5，则输出结果是', '3', '4', '5', '6', '', '', '', 'B', '首先，弄明白这题想考的是x++这种类型的运算顺序，针对本题，\n（x--<5）先用输入的x=5做比较不小于5,为false，应该进入else{}语句；\n再执行x--，x的值为4；\n执行else{}里的打印语句，先输出x的值4（控制台显示结果），\n再执行x++，变量x的值为5；\n程序结束\n延伸一下，++x作运算时，先把变量x的值加1，再去做其他运算\n如果把最后的输出改为printf(“ % d”, ++x);\n控制台显示的为5', '1', '4', '1', '80.00%');
INSERT INTO `questionBank` VALUES ('7', '1100000005', '1', 'c', '在小端序的机器中,如果 \nunion X{\n    int x;\n    char y[4];\n};\n如果:\nX a;\na.x=0x11223344;//16 进制 则:______', 'a.y[0]=0x11', 'a.y[1]=0x11', 'a.y[2]=0x11', 'a.y[3]=0x11', 'a.y[0]=0x22', 'a.y[3]=0x22', '', 'D', '1字节 = 8位(bit) 而char最开始为ascii码，从0~255，为8位，即1字节。 32位系统下变量的字节数： short 2字节 int 4字节即32位 float 4字节 double 8字节', '1', '4', '1', '80.00%');
INSERT INTO `questionBank` VALUES ('8', '1100000006', '1', 'c', '请将下列构造函数补充完整，使得程序的运行结果是5\n#include<iostream>\nusing namespace std;\nclass Sample{\n    public:\n        Sample(int x){\n            ________\n        }\n        ~Sample(){\n            if(p) delete p;\n        }\n        int show(){\n            return *p;\n        }\n', '*p=x;E21:J21', 'p=new int(x);', '*p=new int(x);', 'p=&x;', '', '', '', 'B', 'x是方法参数，则x的值和它所在的内存位置，都会在方法结束后失效，所以， 指针p不应该指向x的内存地址，而应该指向自己申请的一个地址空间，于是D错；而至于B和C，为何选B，由于 ‘p’和‘*p’，一个表示p指向的地址，一个则表示p指向的地址位置的值，所以，p = new int(x); 大致做了两件事：① 让p指向一个不会由于方法结束而失效的地址 ②将x值传给这个地址空间处， 所以最终，*p 也就是 p指向位置的值，就是x值。最终，选B。', '1', '3', '1', '');
INSERT INTO `questionBank` VALUES ('9', '1100000007', '1', 'c', '下面程序运行后的结果为：\nchar str[] = \"glad to test something\";\nchar *p = str;\np++;\nint *p1 = reinterpret_cast<int *>(p);\np1++;\np = reinterpret_cast<char *>(p1); \nprintf(\"result is %s\\n\", p);', 'result is glad to test something', 'result is ad to test something', 'result is test something', 'result is to test something', '', '', '', 'D', '该题的关键是要认清楚强制类型转换后指针的类型。\np的类型为char *，p++后p指向str数组的第2个元素即字母“l”的位置。\np1的类型为int *，p1++后p1指向的位置增加4个字节，指向str数组中的第6个元素即字母“t”的位置。\n因此最后p的内容为“to test something”。', '1', '2', '1', '');
INSERT INTO `questionBank` VALUES ('10', '1100000008', '1', 'c', '下列关于C/C++的宏定义的说法中，不正确的是：', '宏定义的常量更容易理解，如果可以使用宏定义常量的话，要避免使用 const常量', '宏的嵌套定义过多会影响程序的可读性，而且很容易出错', '相对于函数调用，宏定义可以提高程序的运行效率', '宏定义不检查参数正确性，会有安全隐患', '', '', '', 'A', '宏定义由预编译器来处理，当你定义一个记号#define RATIO 1.652时，RATIO可能从未被编译器看到，而直接被预处理其移走了，如果你的定义是#define RATIO ，在预处理进行一个宏替换的时候，由于你调用地方的特殊性，你会获得一个莫名奇妙的错误，但是如果你使用的const double RATIO = 1.652，当你没有初始化这个变量，则在这个变量出错地方编译器将给出错误信息，可以方便程序设计者很快的找出错误所在。这就是在effective C++中作者所说的尽量以const enum', '1', '2', '1', '');
INSERT INTO `questionBank` VALUES ('11', '1100000009', '1', 'c', '在64位操作系统上，如下数据结构占用的存储空间大小为多少字节\nstruct A{\n   unsigned int a;\n   char b[2];\n   double c;\n   short d;\n}', '12', '24', '20', '16', '', '', '', 'B', 'structA{\n   unsigned int a; //对于开始连续的第一个8字节内存，a占4字节 \n   char b[2];      //b[]占1*2字节，在a后的连续2字节内存放，还剩2个字节，\n   double c;       //c占8字节，第一个8字节还剩2字节不足以存放c,自动补充该2字节。并同时开辟第二个8字节内存存放c\n   short d;        //d占2字节，开辟第三个8字节，存放d。剩余的6个字节补齐。故总共开辟了8*3=24字节存放该数据结构\n}', '1', '2', '1', '');
INSERT INTO `questionBank` VALUES ('12', '1100000010', '1', 'c', 'C++中，下列关于基类和派生类关系的叙述中，正确的是', '每个类最多只能有一个直接基类', '派生类中的成员可以访问基类中的任何成员', '基类的构造函数必须在派生类的构造函数体中进行显示调用', '派生类除了继承基类的成员，还可以定义新的成员', '', '', '', 'D', 'A：可以多继承\nB：可以访问非privete属性的任何成员\nC：可以隐式调用', '1', '2', '1', '');
INSERT INTO `questionBank` VALUES ('13', '1100000011', '1', 'c', '#include < stdio.h >\nstruct S\n{ \n    int a;\n    int b; \n};\nmain( )\n{ \n    struct S a, *p=&a;\n    a.a = 99;\n    printf( \"%d\\n\",  ____);\n}\n程序要求输出结构体中成员a的数据,以下不能填入横线处的内容是?', 'a.a', '* p.a', 'a.a', '( * p ) . a', '', '', '', 'B', '这里一定要区分.运算符与->运算符的区别。\n.运算符是类成员访问运算符，->是指针对象访问成员时用的访问运算符。\n*p.a，因为.的优先级比*的优先级高，故上面的表达方式不对，程序将报错', '1', '2', '1', '');
INSERT INTO `questionBank` VALUES ('14', '1200000001', '1', 'JAVA', '下列关于栈的描述中错误的是( ) ', ' 栈是先进后出的线性表', ' 栈只能顺序存储', ' 栈具有记忆作用', '对栈的插入弓删除操作中，不需要改变栈底指针', '', '', '', 'B', '栈是链式存储的', '1', '20', '1', '95.23%');
INSERT INTO `questionBank` VALUES ('15', '1200000002', '1', 'JAVA', '对于长度为n的线性表，在最坏情况下，下列各排序法所对应的比较次数中正确的是(  ) ', ' 冒泡排序为n/2 ', ' 冒泡排序为n', ' 快速排序为n', ' 快速排序为n(n-l)/2', '', '', '', 'D', '想想快速排序，每次都会选取线性表的轴值，随后以此轴值划分为两个子线性表再分别进行快排，在最坏情况下，也就是说每次选出的线性表轴值完全不能将这个线性表划分为两个子线性表。那么此时快速排序退化为冒泡排序了。  那么第一趟排序时，轴值（线性表的中间位置）被选出，这个值绝对是这个线性表中最大的（不然也不能是最坏情况），其他值都比他小，那么线性表现在分为完全不对等的两段（一段是0,另一段是n - 1），一段是这个值，一段是其他值。同样第二趟排序在刚才剩下的值中选中间值（剩余值中最大的那个），又分为不对等两段，依次递', '1', '19', '1', '95.00%');
INSERT INTO `questionBank` VALUES ('16', '1200000003', '1', 'JAVA', '下列对于线性链表的描述中正确的是(  )', ' 存储空间间不一定是连续，且各元素的存储顺序是任意的', ' 存储空间不一定是连续，且前件元素一定存储在后件元素的前面 ', ' 存储定间必须连续，且前件元素一定存储在后件元素的前面', '存储空间必须连续，且各元素的存储顺序是任意的', '', '', '', 'A', '链接存储并不要求存储空间连续,存储位置也不用有序', '1', '6', '1', '85.71%');
INSERT INTO `questionBank` VALUES ('17', '1200000004', '1', 'JAVA', '关于sleep()和wait()，以下描述错误的一项是（ ）', 'sleep是线程类（Thread）的方法，wait是Object类的方法', 'sleep不释放对象锁，wait放弃对象锁', 'sleep暂停线程、但监控状态仍然保持，结束后会自动恢复', ' wait后进入等待锁定池，只有针对此对象发出notify方法后获得对象锁进入运行状态', '', '', '', 'D', 'sleep是线程类（Thread）的方法，导致此线程暂停执行指定时间，给执行机会给其他线程，但是监控状态依然保持，到时后会自动恢复。调用sleep不会释放对象锁。\n\nwait是Object类的方法，对此对象调用wait方法导致本线程放弃对象锁，进入等待此对象的等待锁定池，只有针对此对象发出notify方法（或notifyAll）后本线程才进入对象锁定池准备获得对象锁进入运行状态。', '1', '7', '1', '87.50%');
INSERT INTO `questionBank` VALUES ('18', '1200000005', '2', 'JAVA', '选择Java语言中的基本数据类型（）', 'byte', 'Integer', 'char', 'long', '', '', '', 'ACD', '基本数据类型总共有8个：byte,short,int,long,char,boolean,float,double', '1', '5', '1', '83.33%');
INSERT INTO `questionBank` VALUES ('19', '1200000006', '1', 'JAVA', 'Which two demonstrate a “has a” relationship()?', ' public interface Person { }\r\n\r\npublic class Employee extends Person{ }', 'public interface Shape { }\r\n\r\npublic interface Rectandle extends Shape { }', 'public interface Colorable { }\r\n\r\npublic class Shape implements Colorable\r\n\r\npublic interface Colorable { }\r\n\r\npublic class Shape implements Colorable\r\n\r\npublic interface Colorable { }\r\n\r\npublic class Shape implements Colorable\r\n\r\npublic interface Colorab', 'public class Species{ }\r\n\r\npublic class Animal{private Species species;}', '', '', '', 'A', '“has a”是关联关系，关联分双向关联和单向关联,双向关联是A,B类分别持有对方的引用(有是对方的属性).\r\n\r\n单向关联是一方持另一方的引用.', '1', '6', '1', '85.71%');
INSERT INTO `questionBank` VALUES ('20', '1200000007', '1', 'JAVA', '下面哪个可以改变容器的布局？( )', 'setLayout(aLayoutManager);', 'addLayout(aLayoutManager);', 'layout(aLayoutManager);', 'setLayoutManager(aLayoutManager);', '', '', '', 'A', 'Java设置布局管理器setLayout()', '1', '5', '1', '83.33%');
INSERT INTO `questionBank` VALUES ('21', '1200000008', '1', 'JAVA', '提供Java存取数据库能力的包是（）', 'java.sql', 'java.awt', 'java.lang', 'java.swing', '', '', '', 'A', 'java.sql是JDBC的编程接口\n\njava.awt和java.swing是做图像界面的类库\n\njava.lang: Java 编程语言进行程序设计的基础类', '1', '2', '1', '');
INSERT INTO `questionBank` VALUES ('22', '1200000009', '2', 'JAVA', '不能用来修饰interface的有（）', 'private', 'public', 'protected', 'static', '', '', '', 'ACD', '修饰接口可以是public和默认', '1', '2', '1', '');
INSERT INTO `questionBank` VALUES ('23', '1200000010', '2', 'JAVA', '下列说法错误的有（）', ' 在类方法中可用this来调用本类的类方法', ' 在类方法中调用本类的类方法时可直接调用', '在类方法中只能调用本类中的类方法', ' 在类方法中绝对不能调用实例方法', '', '', '', 'ACD', 'A.在类方法中不能使用this关键字\n\nC．在类方法中可以调用其它类中的类方法\n\nD．在类方法中可以通过实例化对象调用实例方法', '1', '2', '1', '');
INSERT INTO `questionBank` VALUES ('24', '1200000011', '1', 'JAVA', '从下面四段（A，B，C，D）代码中选择出正确的代码段（）', 'abstract class Name {\n\nprivate String name;\n\npublic abstract boolean isStupidName(String name) {}\n\n}', 'public class Something {\n\nvoid doSomething () {\n\nprivate String s = “”;\n\nint l = s.length();\n\n}\n\n}', 'public class Something {\n\npublic static void main(String[] args) {\n\nOther o = new Other();\n\nnew Something().addOne(o);\n\n}\n\npublic void addOne(final Other o) {\n\no.i++;\n\n}\n\n}\n\nclass Other {\n\npublic int i;\n\n}', 'public class Something {\n\npublic int addOne(final int x) {\n\nreturn ++x; }\n\n}', '', '', '', 'C', 'A.抽象方法不能有方法体\n\nB．方法中定义的是局部变量，不能用类成员变量修饰符private\n\nD．final修饰为常量，常量的值不能被改变', null, '4', '1', '80.00%');
INSERT INTO `questionBank` VALUES ('25', '1200000012', '1', 'JAVA', '选择下面代码的运行结果：（）。\n\npublic class Test{\n\npublic void method()\n\n{\n\nfor(int i = 0; i < 3; i++)\n\n{\n\nSystem.out.print(i);\n\n}\n\nSystem.out.print(i);\n\n}\n\n}', '0', '123', '编译错误', '没有任何输出', '', '', '', 'C', 'i变量的作用范围是整个for循环', null, '4', '1', '80.00%');
INSERT INTO `questionBank` VALUES ('26', '1200000013', '1', 'JAVA', '下面那几个函数是public void method(){…}的重载函数？（）', 'public void method( int m){…}', 'public int method(){…}', 'public void method2(){…}', 'public int method(int m，float f ){…}', '', '', '', 'A', '重载：方法名相同，参数列表不同', null, '5', '1', '83.33%');
INSERT INTO `questionBank` VALUES ('27', '1200000014', '1', 'JAVA', '给出如下声明：\n\nString s = “Example”;\n\n合法的代码由哪些？', 's>>>=3', 's[3]= “X”', 'int i = s.iength()', 's = s +10', '', '', '', 'D', 'A. 移位运算，要是整数类型。\n\nB．s不是数组\n\nC．String类取长度的方法为：length()\n\nD. 字符串相加', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('28', '1200000015', '2', 'JAVA', '有关线程的哪些叙述是对的（ ）', '一旦一个线程被创建，它就立即开始运行', '使用start()方法可以使一个线程成为可运行的，但是它不一定立即开始运行', '当一个线程因为抢先机制而停止运行，它被放在可运行队列的前面', '一个线程可能因为不同的原因停止并进入就绪状态', '', '', '', 'BCD', '在抢占式线程模型中，操作系统可以在任何时候打断线程。通常会在它运行了一段时间（就是所谓的一个\n\n时间片）后才打断它。这样的结果自然是没有线程能够不公平地长时间霸占处理器。', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('29', '1300000001', '1', 'H5', '下列js可以让一个input的背景颜色变成红色的是？', 'inputElement.style.backgroundColor = \'red\';', 'inputElement.backgroundColor = \'red\';', 'inputElement.style.backgroundColor = \'#0000\';', 'inputElement.backgroundColor = \'#0000\';', '', '', '', 'A', 'A写法是正确的，有两种写法：\ndocument.getElementById(\"input\").style.backgroundColor = \"red\";      \ninputElement.style.backgroundColor = \"#FF0000\";', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('30', '1300000002', '1', 'H5', 'console.log(([])?true:false); \nconsole.log(([]==false?true:false)); \nconsole.log(({}==false)?true:false) \n得到的结果分别是什么？（）', 'false true true', 'true true true', 'true false true', 'true true false', '', '', '', 'D', '类型转换：\n引用类型转换成基本类型才能进行==运算；\n引用类型转换成布尔都是true；\n所以答案应该是：true、true、false\n第一个：[] 转成布尔，true。\n第二个：\n按照隐式转换规则：\n[] == false \n=> [].valueOf() == false \n => [].toString() == false \n=> \"\" == false \n=> true\n第三个：\n同上。\n{} == false \n=> {}.valueOf() == false\n => {}.toString(', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('31', '1300000003', '1', 'H5', '以下js表达式返回false的是（）', '1==true', '“”==false', 'faslse==null', 'null==undefined', '', '', '', 'C', 'undefined值是派生自null值的，因此规定对它们的相等性测试要返回true；但null ===\n  undefined会返回false，因为它们是不同类型的值。 \n  在比较相等性之前，不能将null 和undefined转换成其他任何值。', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('32', '1300000004', '1', 'H5', 'Number(null);\n上面的代码将返回：', 'Null', '0', 'undefined', '1', '', '', '', 'B', '下面几个都会转化为0：\nNumber()\nNumber(0)\nNumber(\'\')\nNumber(\'0\')\nNumber(false)\nNumber(null)\nNumber([])\nNumber([0])', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('33', '1300000005', '1', 'H5', '+new Array(017)\' 输出？（ ）\'+new Array(017)\' 输出？（ ）', '17', 'NaN', '15', 'Error', '', '', '', 'B', '首先，前面+是一元运算符，相当于我们说的正负，无运算效果，但是可以将字符串等转为number类型。  \n 此题中017其实是八进制，故而是是Array(15)。  \n这里相当于对于一个未赋值但是长度为15的数组进行number类型转化，其结果为NaN', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('34', '1300000006', '1', 'H5', 'var one;\nvar two=null;\nconsole.log(one==two,one===two);\n上面代码的输出结果是：', 'true false', 'true true', 'false false', 'false true', '', '', '', 'A', '在JavaScript中下面的值被当作假 false. undefined. null. 空字符串 数字0 数字NAN == 和 ===的区别是，==会将两边的值进行隐式类型转换，而 ===也不会。 题目中，var one; 只定义未赋值，故one是的值为undefined, undefined和null转换为Boolean类型后都为false，===不会进行转换， ，那么undefined和null当然不相等啦，所以是true！', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('35', '1300000007', '1', 'H5', 'for(var i=0;i<5;++i){\nsetTimeout(function\n(){\n         console.log(i+ ’ ’);\n},100);\n}\n以上代码执行的结果是：（）。', '5 5 5 5 5', '0 0 0 0 0', '0 1 2 3 4', '1 2 3 4 5', '', '', '', 'A', 'setTimeout() 方法用于在指定的毫秒数后调用函数或计算表达式。 所以匿名函数根本就没有立即执行，而是在100毫秒后执行，匿名函数开始访问外部函数的变量时，变量的值早已成为最后一个即5', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('36', '1300000008', '1', 'H5', '请阅读以下代码：\nvar obj = {};\nobj.log = console.log;\nobj.log.call(console,this);\n该代码在浏览器中执行，输出的日志结果是什么？', 'window', 'console', 'obj', 'undefined', '', '', '', 'A', 'call()方法,第一个参数和apply()一样,是在其中运行的作用域即this;和apply()不同的是,call()方法中的其余的参数必须直接传给函数,即在使用call()方法时参数必须逐个的列出来. this 在函数执行时，this 总是指向调用该函数的对象。要判断 this 的指向，其实就是判断 this 所在的函数属于谁。 在《javaScript语言精粹》这本书中，把 this 出现的场景分为四类，简单的说就是： 有对象就指向调用对象 没调用对象就指向全局对象 用new构造就指向新对象 通过 ', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('37', '1300000009', '1', 'H5', '关于对变量的说法，错误的是？', '一般使用var key=val的形式赋值', '由于javascript的动态特性，常常直接采取key= val的形式赋值', '若声明而未对变量赋值，该变量的值为undefined', 'var carname=\"Volvo\";var carname;顺序执行后，caranme的值依然为Volvo', '', '', '', 'B', 'javascript 一般使用var key = val；的形式复制，声明变量的时候也要用var key； 如果不用var关键字，声明的就是全局变量，一般不要这么做；\n变量重复声明也不会错，js里有声明提前，如果两次声明都有赋值，如：var a=10; var a=100; 则变量a的值是100； 若var a=10; var a; 则变量a的值是10；第二次的var a；没什么用。', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('38', '1300000010', '1', 'H5', 'var x=10;\nfunction cals(myNum) {\nreturn x+myNum;\n}\n函数 cals(7) 返回什么？', 'NaN', '17', '107', '10', '7', '', '', 'B', '函数内部可以访问函数外部的变量', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('39', '1400000001', '1', 'dataStructure', '算法的有穷性是指（   ）', '算法程序的运行时间是有限的    ', '算法程序所处理的数据量是有限的', '算法程序的长度是有限的', '算法只能被有限的用户使用', '', '', '', 'A', '算法原则上能够精确地运行，而且人们用笔和纸做有限次运算后即可完成。有穷性是指算法程序的运行时间是有限的。', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('40', '1400000002', '1', 'dataStructure', '对长度为n的线性表排序，在最坏情况下，比较次数不是n(n－1)/2的排序方法是（   ）', '快速排序  ', '冒泡排序 ', '直接插入排序', '堆排序', '', '', '', 'D', '在最坏的情况下，堆排序需要比较的次数为O(nlog2n)，所以选择D', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('41', '1400000003', '1', 'dataStructure', '下列关于栈的叙述正确的是（   ）', '栈按\"先进先出\"组织数据', '栈按\"先进后出\"组织数据', '只能在栈底插入数据', '不能删除数据', '', '', '', 'B', '栈是按照\"先进后出\"的原则组织数据的，只能在栈顶插入或删除数据，所以选择B）', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('42', '1400000004', '1', 'dataStructure', '一个栈的初始状态为空。现将元素1、2、3、4、5、A、B、C、D、E依次入栈，然后再依次出栈，则元素出栈的顺序是（   ）', '12345ABCDE', 'EDCBA54321', 'ABCDE12345 ', '54321EDCBA', '', '', '', 'B', '栈是先进后出的原则组织数据，所以入栈最早的最后出栈，所以选择B', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('43', '1400000005', '1', 'dataStructure', '下列叙述中正确的是（   ）', '循环队列有队头和队尾两个指针，因此，循环队列是非线性结构', '在循环队列中，只需要队头指针就能反映队列中元素的动态变化情况', '在循环队列中，只需要队尾指针就能反映队列中元素的动态变化情况', '循环队列中元素的个数是由队头指针和队尾指针共同决定', '', '', '', 'D', '循环队列有队头和队尾两个指针，但是循环队列仍是线性结构的，所以A）错误；在循环队列中只需要队头指针与队尾两个指针来共同反映队列中元素的动态变化情况，所以B）与C）错误', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('44', '1400000006', '1', 'dataStructure', '在长度为n的有序线性表中进行二分查找，最坏情况下需要比较的次数是（   ）', 'O(n)', 'O(n2)', 'O(Log2n)', 'O(n Log2n)', '', '', '', 'C', '当有序线性表为顺序存储时才能用二分法查找。可以证明的是对于长度为n的有序线性表，在最坏情况下，二分法查找只需要比较O(nlog2n)次，而顺序查找需要比较n次。', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('45', '1400000007', '1', 'dataStructure', '下列叙述中正确的是（   ）', '顺序存储结构的存储一定是连续的，链式存储结构的存储空间不一定是连续的', '顺序存储结构只针对线性结构，链式存储结构只针对非线性结构', '顺序存储结构能存储有序表，链式存储结构不能存储有序表', '链式存储结构比顺序存储结构节省存储空间', '', '', '', 'A', '链式存储结构既可以针对线性结构也可以针对非线性结构，所以B）与C）错误。链式存储结构中每个结点都由数据域与指针域两部分组成，增加了存储空间，所以D）错误。', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('46', '1400000008', '1', 'dataStructure', '在数据管理技术发展的三个阶段中，数据共享最好的是（   ）', '人工管理阶段 ', '文件系统阶段', '数据库系统阶段', '三个阶段相同', '', '', '', 'C', '据管理发展至今已经历了三个阶段：人工管理阶段、文件系统阶段和数据库系统阶段。其中最后一个阶段结构简单，使用方便逻辑性强物理性少，在各方面的表现都最好，一直占据数据库领域的主导地位，所以选择C', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('47', '1400000009', '1', 'dataStructure', '下列叙述中正确的是（   ）', '栈是\"先进先出\"的线性表?', '队列是\"先进后出\"的线性表', '循环队列是非线性结构 ', '有序线性表既可以采用顺序存储结构，也可以采用链式存储结构', '', '', '', 'D', '栈是先进后出的线性表，所以A）错误；队列是先进先出的线性表，所以B）错误；循环队列是线性结构的线性表，所以C）错误。', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('48', '1400000010', '1', 'dataStructure', '支持子程序调用的数据结构是（   ）', '栈', '树', '队列', '二叉树', '', '', '', 'A', '栈支持子程序调用。栈是一种只能在一端进行插入或删除的线性表，在主程序调用子函数时要首先保存主程序当前的状态，然后转去执行子程序，最终把子程序的执行结果返回到主程序中调用子程序的位置，继续向下执行，这种调用符合栈的特点，因此本题的答案为A', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('49', '1400000011', '1', 'dataStructure', '某二叉树有5个度为2的结点，则该二叉树中的叶子结点数是（   ）', '10', '8', '6', '4', '', '', '', 'C', '根据二叉树的基本性质3：在任意一棵二叉树中，度为0的叶子节点总是比度为2的节点多一个，所以本题中是5＋1＝6个', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('50', '1400000012', '1', 'dataStructure', '下列排序方法中，最坏情况下比较次数最少的是（   ）', '冒泡排序 ', '简单选择排序 ', '直接插入排序', '堆排序', '', '', '', 'D', '冒泡排序与简单插入排序与简单选择排序法在最坏情况下均需要比较n(n－1)/2次，而堆排序在最坏情况下需要比较的次数是nlog2n', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('51', '1400000013', '1', 'dataStructure', '下列叙述中正确的是（   ）', '在栈中，栈中元素随栈底指针与栈顶指针的变化而动态变化', '在栈中，栈顶指针不变，栈中元素随栈底指针的变化而动态变化', '在栈中，栈底指针不变，栈中元素随栈顶指针的变化而动态变化', '在栈中，栈中元素不会随栈底指针与栈顶指针的变化而动态变化', '', '', '', 'C', '栈是先进后出的数据结构，在整个过程中，栈底指针不变，入栈与出栈操作均由栈顶指针的变化来操作，所以选择C', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('52', '1400000014', '1', 'dataStructure', '某二叉树共有7个结点，其中叶子结点只有1个，则该二叉树的深度为（假设根结点在第1层）（   ）', '3', '4', '6', '7', '', '', '', 'D', '根据二叉树的基本性质3：在任意一棵二叉树中，度为0的叶子节点总比度为2的节点多一个，所以本题中度为2的节点为1－1＝0个，所以可以知道本题目中的二叉树的每一个节点都有一个分支，所以共7个节点共7层，即深度为7。', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('53', '1400000015', '1', 'dataStructure', '下列叙述中正确的是（   ）', '算法就是程序????', '设计算法时只需要考虑数据结构的设计', '设计算法时只需要考虑结果的可靠性??', '以上三种说法都不对', '', '', '', 'D', '算法是指解题方案的准确而完整的描述，算法不等于程序，也不等于计算方法，所以A）错误。设计算法时不仅要考虑对数据对象的运算和操作，还要考虑算法的控制结构，所以B）和C）错误', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('54', '1400000016', '1', 'dataStructure', '下列数据结构中，属于非线性结构的是（   ）', '循环队列', '带链队列', '二叉树', '带链栈', '', '', '', 'C', '树是简单的非线性结构，所以二叉树作为树的一种也是一种非线性结构', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('55', '1400000017', '1', 'dataStructure', '下列数据结构中，能够按照\"先进后出\"原则存取数据的是（   ）', '循环队列', '栈', '队列?', '二叉树', '', '', '', 'B', '栈是按先进后出的原则组织数据的。队列是先进先出的原则组织数据。因此，本题答案为B', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('56', '1400000018', '1', 'dataStructure', '对于循环队列，下列叙述中正确的是（   ）', '队头指针是固定不变的', '队头指针一定大于队尾指针', '队头指针一定小于队尾指针', '队头指针可以大于队尾指针，也可以小于队尾指针', '', '', '', 'D', '循环队列的队头指针与队尾指针都不是固定的，随着入队与出队操作要进行变化。因为是循环利用的队列结构所以对头指针有时可能大于队尾指针有时也可能小于队尾指针。', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('57', '1400000019', '1', 'dataStructure', '算法的空间复杂度是指（   ）', '算法在执行过程中所需要的计算机存储空间', '算法所处理的数据量', '算法程序中的语句或指令条数', '算法在执行过程中所需要的临时工作单元数', '', '', '', 'A', '算法的空间复杂度是指算法在执行过程中所需要的内存空间。', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('58', '1400000020', '1', 'dataStructure', '下列叙述中正确的是（?? ）', '有一个以上根结点的数据结构不一定是非线性结构', '只有一个根结点的数据结构不一定是线性结构', '循环链表是非线性结构', '双向链表是非线性结构', '', '', '', 'B', '线性结构应满足：有且只有一个根结点与每个结点最多有一个前件，也最多有一个后件，所以B）正确。所以有一个以上根结点的数据结构一定是非线性结构，所以A）错误。循环链表和双向链表都是线性结构的数据结构，所以C）和D）错误。', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('59', '1500000001', '1', 'C#', ' 装箱、拆箱操作发生在: ()', '类与对象之间', '对象与对象之间', '引用类型与值类型之间', '引用类型与引用类型之间', '', '', '', 'C', '通俗的讲，就是基本数据类型和包装类之间的转换。如： int  类型和  Integer  类的转换\n基本数据类型转化成包装类是装箱  (如： int  -->  Integer)。\n包装类转化成基本数据类型就是拆箱  (如：Integer  -->  int)。\n包装类就是引用类型，基本数据类型就是值类型。所以选C', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('60', '1500000002', '1', 'C#', '接口是一种引用类型，在接口中可以声明（），但不可以声明公有的域或私有的成员变量。\n', '方法、属性、索引器和事件', '方法、属性信息、属性', '索引器和字段', '事件和字段；', '', '', '', 'A', '?接口是一种引用类型，在接口中可以声明方法、属性、索引器、事件，但不可以声明公有的域或私有的成员变量。', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('61', '1500000003', '1', 'C#', '以下的 c# 代码段：\nPublic struct Person{\nString Name;\nInt Age;\n}\nPublic  static void Main()\n{\nHashtable A;\nPerson B;\n// 其他处理代码\n}\n以下说法正确的是（）', 'A为引用类型的变量，B为值类型的变量', 'A为值类型的变量 ，B为引用类型的变量', 'A和B都是值类型的变量', 'A和B都是引用类型的变量', '', '', '', 'A', '在 C# 中，结构是值类型数据结构。它使得一个单一变量可以存储各种数据类型的相关数据。 struct  关键字用于创建结构。 为了定义一个结构，必须使用 struct 语句。struct 语句为程序定义了一个带有多个成员的新的数据类型。', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('62', '1500000004', '1', 'C#', '下列关于C#中索引器理解正确的是？', '索引器的参数必须是两个或两个以上', '索引器的参数类型必须是整数型', '索引器没有名字', '以上皆非', '', '', '', 'C', '索引器允许类或者结构的实例按照与数组相同的方式进行索引取值，索引器与属性类似，不同的是索引器的访问是带参的。\n索引器和数组比较：\n(1)索引器的索引值(Index) 类型不受限制\n(2)索引器允许重载\n(3)索引器不是一个变量\n \n索引器和属性比较：\n(1)属性以名称来标识，索引器以函数形式标识\n(2)索引器可以被重载，属性不可以\n(3)索引器不能声明为static，属性可以', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('63', '1500000005', '1', 'C#', '在C#中利用Socket进行网络通信编程的一般步骤是：建立Socket侦听、（ ）、利用Socket接收和发送数据。', '建立Socket连接', '获得端口号', '获得IP地址', '获得主机名', '', '', '', 'A', 'A.建立Socket连接\nBCD不完整', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('64', '1500000006', '1', 'C#', '在C#中，装箱操作是将值类型转化成引用类型。', '对', '错', '', '', '', '', '', 'A', '需要将值类型对象转化成引用类型对象进行传递时即需要装箱操作', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('65', '1500000007', '1', 'C#', 'C#程序段的结果： int[][] array = new int[3][]{ new int[3]{5,6,2}, new int[5]{6,9,7,8,3}, new int[2]{3,2} }; array[2][2] 返回（）', '9', '6', '2', '溢出', '', '', '', 'D', '与C/C++不同，Java中，二维数组的第二维长度可以不同，即可以第一行两列，第二行三列\nint[][] arr = {{1,2},{3,4,5}};\n或\nint[][] a = new int[2][];\na[0] = new int[]{1,2};\na[1] = new int[]{3,4,5};', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('66', '1500000008', '1', 'C#', 'abstract class BaseClass\n{\n    public virtual void MethodA()\n    {\n    }\n    public virtual void MethodB()\n    {\n    }\n}\nclass Class1: BaseClass\n{\n    public void MethodA(string arg)\n    {\n    }\n    public override void MethodB()\n    {\n    }\n}\nclass Class', 'BaseClass.MethodA', 'Class2.MethodA', 'Class1.MethodA', '都不是', '', '', '', 'A', '若  publicvoidMethodA(string arg)中没参数则调用Class1,(不管使用new还是override,还是都没用)\n这里有参数,则调用的是BaseClass.vs2013', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('67', '1500000009', '1', 'C#', '下列代码输出为（）：\nclass Father{\n    public void F() { \n        Console.WriteLine(“A.F”); \n    }\n    public virtual void G() { \n        Console.WriteLine(“A.G”); \n    }\n}\n  \nclass Son: Father{\n    new public void F() { \n        Console.WriteLine(“B.F”); \n    }\n  ', 'A.F    B.F    A.G   B.G', 'A.F    B.F    B.G   B.G', 'A.F    A.F    B.G   B.G', 'B.F    B.F    B.G   B.G', '', '', '', 'B', '虚类是存在于基类跟子类之间。在C#里基类的成员在子类里是可用的，并且不会出现不希望的错误。在子类里要明确写出是继承的哪个类要重写的是哪个方法。\n在C#里，子类可以使用跟父类一样的方法名。\n1.基类的方法必须定义为虚类(virtual)\n2.如果这个方法在子类里没有加上关键字new或者override，会警告warning而且会当做new关键字来处理\n3.如果这个方法在子类里被new修饰，这个方法将被当做主类的独立的方法。\n4.如果这个方法在子类里被override修饰，子类将把这个方法代替基类里的这个方法', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('68', '1500000010', '1', 'C#', '异常类对象均为System．Exception类的对象', '对', '错', '', '', '', '', '', 'A', '应该是 异常类对象均为System．Exception类或其子类的对象。', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('69', '1500000011', '1', 'C#', '在C#中，接口可以被多重继承而类不能。', '对', '错', '', '', '', '', '', 'A', 'c#不支持多重类继承，不过可以继承多个接口', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('70', '1600000001', '1', 'Android', '下列不属于android布局的是()', 'FrameLayout', 'LinearLayout', 'BorderLayout', 'TableLayout', 'RelativeLayout', '', '', 'C', '利用排除法', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('71', '1600000002', '1', 'Android', '下列不属于 service 生命周期的方法是 ____', 'onCreate', 'onDestroy', 'onStop', 'onStart', '', '', '', 'C', '由于Android Service的生命周期并不像Activity那么复杂，它只继承了onCreate(),onStart(),onDestroy()三个方法，当我们第一次启动Service时，先后调用了onCreate(),onStart()这两个方法，当停止Service时，则执行onDestroy()方法，需要注意的是，如果Service已经启动了，当我们再次启动Service时，不会在执行onCreate()方法，而是直接执行onStart()方法。', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('72', '1600000003', '1', 'Android', '将一个Activity设置成窗口的样式，只需设置Theme', 'T', 'F', '', '', '', '', '', 'A', '将一个Activity设置成窗口的样式有两种方式\nAndroidManifest.xml 中加上：\n（1）android:theme=@android:style/Theme.Dialog\n（2）android:theme=@android:style/Theme.Translucent就变成半透明的', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('73', '1600000004', '1', 'Android', '在Android工程中新建了一个Activity 需要在哪个xml文件中声明一下？', 'Main.xml', 'String.xml', 'AndroidMainifest.xml', 'Layout.xml', '', '', '', 'C', '需要在清单文件中进行配置', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('74', '1600000005', '1', 'Android', '在多个应用中读取共享存储数据时，需要用到的query方法，是哪个对象的方法', 'ContentResolver', 'ContentProvider', 'CursorD', 'SQLiteHelper', '', '', '', 'A', 'ContentProvider负责 组织应用程序的数据； 向其他应用程序提供数据； ContentResolver则负责 获取ContentProvider提供的数据； 修改/添加/删除更新数据等', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('75', '1600000006', '1', 'Android', '关于intent的说法，错误的是?', '可以用来激活一些组件', '表示程序想做某事的意图', '只能用于一个组件内部', '是一个简单的消息对象', '', '', '', 'C', 'A：对，startActivity，startService，sendBroadcastReceiver等等\nB:对，本意就是一个意图\nC:错，同一个app中不同组件之间传递信息\nD:对。', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('76', '1600000007', '1', 'Android', '如何把一个字符串转换成URI?', 'uri new uri=uri.parse(\"content://com.changcheng.provider.contactprovider/contact\")', 'uri uri=uri.parse(\"content://com.changcheng.provider.contactprovider/contact\")', 'android.uri uri=uri.parse(\"content://com.changcheng.provider.contactprovider/contact\")', 'uri uri=android.uri.parse(\"content://com.changcheng.provider.contactprovider/contact\")', '', '', '', 'B', 'Uri的使用场景：\n1，调web浏览器  \nUri myBlogUri = Uri.parse(\" http://xxxxx.com \");  \nreturnIt = new Intent(Intent.ACTION_VIEW, myBlogUri);  \n2，地图  \nUri mapUri = Uri.parse(\"geo:38.899533,-77.036476\");  \nreturnIt = new Intent(Intent.ACTION_VIEW, mapUri);  \n3，调拨打电话界面  \n', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('77', '1600000008', '1', 'Android', 'layout中创建的.xml 起名范围只能是', '(a~z) (0~9) ( _  . )', '(a~z)(0~9)(| > <)', '(a~z) (0~9)', '(a~z) ( _  . )', '', '', '', 'A', 'xml命名可以是小写字母、数字、下划线', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('78', '1600000009', '1', 'Android', 'Android中MVC模式 C层指的是？', 'Activity', 'Services', 'Content', 'Intents', '', '', '', 'A', 'M是逻辑模型\nV是视图模型，对应于android里面的View\nc是控制器，android中的activity实现了这个职责', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('79', '1600000010', '1', 'Android', '下面哪种进程最重要，最后被销毁?', '服务进程', '后台进程', '可见进程', '前台进程', '', '', '', 'D', '重要性依次是：前台进程，可见进程，服务进程，后台进程和空进程；所以销毁的顺序是逆方向。', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('80', '1700000001', '1', 'SoftwareDevelopment', 'linux 系统中，给文件授予可执行权限的命令是（）', 'chown', 'mv', 'sudo', 'chmod', '', '', '', 'D', 'chmod 可以通过+-等赋予用户读写执行等权限', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('81', '1700000002', '1', 'SoftwareDevelopment', '软件生存周期中，解决软件“怎么做”的阶段是（ ）', '软件设计', '需求分析', '软件测试', '可行性研究', '', '', '', 'A', '软件设计是软件工程的重要阶段，是一个把软件需求转换为软件表示的过程。软件设计的基本目标是用比较抽象概括的方式确定目标系统如何完成预定的任务，即解决软件“怎么做”的问题。故本题答案为 A 选项。', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('82', '1700000003', '1', 'SoftwareDevelopment', '某系统中有 3 个并发进程，都需要同类资源 4 个，试问该系统不会发生死锁的最少资源数是：', '9', '10', '11', '12', '', '', '', 'B', '3个进程需要各需要占用3个资源，因此当有9个资源时，刚好够分别分给这3个进程，但是这3个进程都还需要第4个资源，因此至少需要10个资源，才不会使其陷入死锁。', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('83', '1700000004', '1', 'SoftwareDevelopment', '终止一个前台进程可能用到的命令和操作是？', 'kill', 'ctrl+C', 'shut down', 'halt', '', '', '', 'B', 'kill    无参数表示向进程输入关闭的指令\n^C    关闭当前（前台）进程\n^Z    暂停当前（前台）进程\nshutdown    关机\nhalt    就是调用shutdown -h', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('84', '1700000005', '1', 'SoftwareDevelopment', '美国卡内基-梅隆大学SEI提出的CMM模型将软件过程的成熟度分为5个等级，以下选项中，属于可管理级的特征哪一个？', '工作无序，项目进行过程中经常放弃当初的计划', '建立了项目级的管理制度', '建立了企业级的管理制度', '软件过程中活动的生产率和质量是可度量的', '', '', '', 'D', 'CMM（Capability Maturity Model）就是SQA用来监管项目的一个标准质量模型,即能力成熟度模型，共分为5个等级，初始级、可重复级、已定义级、已管理级、优化级。', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('85', '1700000006', '1', 'SoftwareDevelopment', '关于 linux 的进程，下面说法不正确的是：', '僵尸进程会被 init 进程接管，不会造成资源浪费；', '孤儿进程的父进程在它之前退出，会被 init 进程接管，不会造成资源浪费；', '进程是资源管理的最小单位，而线程是程序执行的最小单位。Linux 下的线程本质上用进程实现；', '子进程如果对资源只是进行读操作，那么完全和父进程共享物理地址空间。', '', '', '', 'A', 'A 是错误的。孤儿进程会被init进程结果，僵尸进程会一直占用资源除非父进程对其回收', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('86', '1700000007', '1', 'SoftwareDevelopment', '关于内存管理，下列说法错误的是', '谁申请，谁释放', '内存管理主要要避免“过早释放”和“内存泄漏”，对于“过早释放”需要注意@property设置特性时，一定要用对特性关键字，对于“内存泄漏”，一定要申请了要负责释放。', '关键字alloc 或new 生成的对象可以自动释放；', '设置正确的property属性，对于retain需要在合适的地方释放，', '', '', '', 'C', 'alloc或new生成的对象不会自动释放，要自动释放需要调用autorelease方法。\n\n谁申请，谁释放。也不是很对，在non-ARC中，如果一个函数要返回一个在堆上alloc的对象，在返回的时候需要调用autorelease方法。实际上是你申请了，但释放交给了NSAutoReleasePool。', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('87', '1700000008', '1', 'SoftwareDevelopment', '下面哪个命令可以从文本文件的每一行中截取指定内容的数据。', 'cp', 'dd', 'fmt', 'cut', '', '', '', 'D', 'cp 复制\ndd  vim中删除整行\nfmt  编排文本文件\ncut  从一行上移除部分内容选择性显示', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('88', '1700000009', '1', 'SoftwareDevelopment', '在软件开发中，需求分析阶段产生的主要文档是（  ）', '可行性分析报告', '软件需求规格说明书', '概要设计说明书', '集成测试计划', '', '', '', 'B', 'A错误，可行性分析阶段产生可行性分析报告。C错误，概要设计说明书是总体设计阶段产生的文档。D错误，集成测试计划是在概要设计阶段编写的文档。B正确，需求规格说明书是后续工作如设计、编码等需要的重要参考文档。', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('89', '1700000010', '1', 'SoftwareDevelopment', '下面说法哪个正确的：', '各个线程拥有相同的堆栈', 'i++是线程安全的，不需要同步', 'x=y是线程安全的，不需要同步', '对进程来说，其虚拟内存的大小不受物理内存大小的限制', '', '', '', 'D', '线程有自己的栈，但没有堆所以A错。普通整数的一般赋值、增量和减量语句会产生多条机器指令，操作均不具有原子性，需要同步，BC错。虚拟存储器具有请求调入和置换功能，所以虚拟内存的大小不受物理内存大小的限制。', null, '2', '1', '');
INSERT INTO `questionBank` VALUES ('536', '19101', '1', 'other', '有以下程序\n#include <stdio. h>\nmain()\n{ \n    int c[6] = {10,20,30,40,50,60}, * p, * s;\n    p = c; \n    s = &c[5];\n    printf(\"%d\\n\", s-p );\n}\n程序运行后的输出结果是？', '5', '50', '6', '60', '', '', '', 'A', '本题主要考查数组和指针。首先初始化一维数组c[ 6 ],语句p = c;指将c[ 0 ]元素的地址赋给指针变量p;语句s = &c[ 5 ];指将c[ 5 ]元素的地址赋给指针变量s。程序最后输出s – p,即结果为5', '10', null, null, null);
INSERT INTO `questionBank` VALUES ('537', '19102', '1', 'other', '下面哪种情况下,B不能隐式转换为A?', 'class B:public A{}', 'class A:public B{}', 'class B{operator A();}', 'class A{A(const B&);}', '', '', '', 'B', '（A）A是基类，B是派生类，在公有继承方式下，派生类对象/对象指针、对象引用可以赋值给基类的对象/对象指针/对象引用（这时发生隐式转换）。因为派生类中包含了基类中的所有信息。注意：将派生类对象赋值给基类对象，会造成截切问题（派生类中专属的数据和行为会被丢弃掉）\n（B）A是派生类，B是基类。基类对象对象指针、对象引用不能赋值给派生类的对象/ 对象指针、对象引用。原因同上。\n（C） operator A()是B类中的一个类型转换函数，可以将B类对象隐式转换成B类对象。\n（D）A(const B&)是A类的一个', '10', null, null, null);
INSERT INTO `questionBank` VALUES ('538', '19103', '1', 'other', '下列哪个用法那个是错误的（ ）', 'typedef void (*FUN)();', 'const int &ra;', 'extern const int array[256];', 'int* a;', '', '', '', 'B', '1、引用必须初始化，指针可以任何时候初始化  \n2、引用后不能再引用其他对像，指针则可以  \n3、引用不能为空，指针可以为空', '10', null, null, null);
INSERT INTO `questionBank` VALUES ('539', '19104', '1', 'other', '阅读以下程序：\nmain()\n{\n    int x;\n    scanf(“ % d”, &x);\n    if (x-- < 5)printf(“ % d”, x);\n    else printf(“ % d”, x++);\n}\n程序运行后，如果从键盘上输入5，则输出结果是', '3', '4', '5', '6', '', '', '', 'B', '首先，弄明白这题想考的是x++这种类型的运算顺序，针对本题，\n（x--<5）先用输入的x=5做比较不小于5,为false，应该进入else{}语句；\n再执行x--，x的值为4；\n执行else{}里的打印语句，先输出x的值4（控制台显示结果），\n再执行x++，变量x的值为5；\n程序结束\n延伸一下，++x作运算时，先把变量x的值加1，再去做其他运算\n如果把最后的输出改为printf(“ % d”, ++x);\n控制台显示的为5', '10', null, null, null);
INSERT INTO `questionBank` VALUES ('540', '19105', '1', 'other', '在小端序的机器中,如果 \nunion X{\n    int x;\n    char y[4];\n};\n如果:\nX a;\na.x=0x11223344;//16 进制 则:______', 'a.y[0]=0x11', 'a.y[1]=0x11', 'a.y[2]=0x11', 'a.y[3]=0x11', 'a.y[0]=0x22', 'a.y[3]=0x22', '', 'D', '1字节 = 8位(bit) 而char最开始为ascii码，从0~255，为8位，即1字节。 32位系统下变量的字节数： short 2字节 int 4字节即32位 float 4字节 double 8字节', '10', null, null, null);
INSERT INTO `questionBank` VALUES ('541', '19106', '1', 'other', '请将下列构造函数补充完整，使得程序的运行结果是5\n#include<iostream>\nusing namespace std;\nclass Sample{\n    public:\n        Sample(int x){\n            ________\n        }\n        ~Sample(){\n            if(p) delete p;\n        }\n        int show(){\n            return *p;\n        }\n', '*p=x;E21:J21', 'p=new int(x);', '*p=new int(x);', 'p=&x;', '', '', '', 'B', 'x是方法参数，则x的值和它所在的内存位置，都会在方法结束后失效，所以， 指针p不应该指向x的内存地址，而应该指向自己申请的一个地址空间，于是D错；而至于B和C，为何选B，由于 ‘p’和‘*p’，一个表示p指向的地址，一个则表示p指向的地址位置的值，所以，p = new int(x); 大致做了两件事：① 让p指向一个不会由于方法结束而失效的地址 ②将x值传给这个地址空间处， 所以最终，*p 也就是 p指向位置的值，就是x值。最终，选B。', '10', null, null, null);
INSERT INTO `questionBank` VALUES ('542', '121212107', '1', 'JAVA', '有以下程序\n#include <stdio. h>\nmain()\n{ \n    int c[6] = {10,20,30,40,50,60}, * p, * s;\n    p = c; \n    s = &c[5];\n    printf(\"%d\\n\", s-p );\n}\n程序运行后的输出结果是？', '5', '50', '6', '60', '', '', '', 'A', '本题主要考查数组和指针。首先初始化一维数组c[ 6 ],语句p = c;指将c[ 0 ]元素的地址赋给指针变量p;语句s = &c[ 5 ];指将c[ 5 ]元素的地址赋给指针变量s。程序最后输出s – p,即结果为5', '10', null, null, null);
INSERT INTO `questionBank` VALUES ('543', '121212108', '1', 'JAVA', '下面哪种情况下,B不能隐式转换为A?', 'class B:public A{}', 'class A:public B{}', 'class B{operator A();}', 'class A{A(const B&);}', '', '', '', 'B', '（A）A是基类，B是派生类，在公有继承方式下，派生类对象/对象指针、对象引用可以赋值给基类的对象/对象指针/对象引用（这时发生隐式转换）。因为派生类中包含了基类中的所有信息。注意：将派生类对象赋值给基类对象，会造成截切问题（派生类中专属的数据和行为会被丢弃掉）\n（B）A是派生类，B是基类。基类对象对象指针、对象引用不能赋值给派生类的对象/ 对象指针、对象引用。原因同上。\n（C） operator A()是B类中的一个类型转换函数，可以将B类对象隐式转换成B类对象。\n（D）A(const B&)是A类的一个', '10', null, null, null);
INSERT INTO `questionBank` VALUES ('544', '121212109', '1', 'JAVA', '下列哪个用法那个是错误的（ ）', 'typedef void (*FUN)();', 'const int &ra;', 'extern const int array[256];', 'int* a;', '', '', '', 'B', '1、引用必须初始化，指针可以任何时候初始化  \n2、引用后不能再引用其他对像，指针则可以  \n3、引用不能为空，指针可以为空', '10', null, null, null);
INSERT INTO `questionBank` VALUES ('545', '121212110', '1', 'JAVA', '阅读以下程序：\nmain()\n{\n    int x;\n    scanf(“ % d”, &x);\n    if (x-- < 5)printf(“ % d”, x);\n    else printf(“ % d”, x++);\n}\n程序运行后，如果从键盘上输入5，则输出结果是', '3', '4', '5', '6', '', '', '', 'B', '首先，弄明白这题想考的是x++这种类型的运算顺序，针对本题，\n（x--<5）先用输入的x=5做比较不小于5,为false，应该进入else{}语句；\n再执行x--，x的值为4；\n执行else{}里的打印语句，先输出x的值4（控制台显示结果），\n再执行x++，变量x的值为5；\n程序结束\n延伸一下，++x作运算时，先把变量x的值加1，再去做其他运算\n如果把最后的输出改为printf(“ % d”, ++x);\n控制台显示的为5', '10', null, null, null);
INSERT INTO `questionBank` VALUES ('546', '121212111', '1', 'JAVA', '在小端序的机器中,如果 \nunion X{\n    int x;\n    char y[4];\n};\n如果:\nX a;\na.x=0x11223344;//16 进制 则:______', 'a.y[0]=0x11', 'a.y[1]=0x11', 'a.y[2]=0x11', 'a.y[3]=0x11', 'a.y[0]=0x22', 'a.y[3]=0x22', '', 'D', '1字节 = 8位(bit) 而char最开始为ascii码，从0~255，为8位，即1字节。 32位系统下变量的字节数： short 2字节 int 4字节即32位 float 4字节 double 8字节', '10', null, null, null);
INSERT INTO `questionBank` VALUES ('547', '121212112', '1', 'JAVA', '请将下列构造函数补充完整，使得程序的运行结果是5\n#include<iostream>\nusing namespace std;\nclass Sample{\n    public:\n        Sample(int x){\n            ________\n        }\n        ~Sample(){\n            if(p) delete p;\n        }\n        int show(){\n            return *p;\n        }\n', '*p=x;E21:J21', 'p=new int(x);', '*p=new int(x);', 'p=&x;', '', '', '', 'B', 'x是方法参数，则x的值和它所在的内存位置，都会在方法结束后失效，所以， 指针p不应该指向x的内存地址，而应该指向自己申请的一个地址空间，于是D错；而至于B和C，为何选B，由于 ‘p’和‘*p’，一个表示p指向的地址，一个则表示p指向的地址位置的值，所以，p = new int(x); 大致做了两件事：① 让p指向一个不会由于方法结束而失效的地址 ②将x值传给这个地址空间处， 所以最终，*p 也就是 p指向位置的值，就是x值。最终，选B。', '10', null, null, null);
INSERT INTO `questionBank` VALUES ('548', '111212122', '1', 'C', '有以下程序\n#include <stdio. h>\nmain()\n{ \n    int c[6] = {10,20,30,40,50,60}, * p, * s;\n    p = c; \n    s = &c[5];\n    printf(\"%d\\n\", s-p );\n}\n程序运行后的输出结果是？', '5', '50', '6', '60', '', '', '', 'A', '本题主要考查数组和指针。首先初始化一维数组c[ 6 ],语句p = c;指将c[ 0 ]元素的地址赋给指针变量p;语句s = &c[ 5 ];指将c[ 5 ]元素的地址赋给指针变量s。程序最后输出s – p,即结果为5', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('549', '111212123', '1', 'C', '下面哪种情况下,B不能隐式转换为A?', 'class B:public A{}', 'class A:public B{}', 'class B{operator A();}', 'class A{A(const B&);}', '', '', '', 'B', '（A）A是基类，B是派生类，在公有继承方式下，派生类对象/对象指针、对象引用可以赋值给基类的对象/对象指针/对象引用（这时发生隐式转换）。因为派生类中包含了基类中的所有信息。注意：将派生类对象赋值给基类对象，会造成截切问题（派生类中专属的数据和行为会被丢弃掉）\n（B）A是派生类，B是基类。基类对象对象指针、对象引用不能赋值给派生类的对象/ 对象指针、对象引用。原因同上。\n（C） operator A()是B类中的一个类型转换函数，可以将B类对象隐式转换成B类对象。\n（D）A(const B&)是A类的一个', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('550', '111212124', '1', 'C', '下列哪个用法那个是错误的（ ）', 'typedef void (*FUN)();', 'const int &ra;', 'extern const int array[256];', 'int* a;', '', '', '', 'B', '1、引用必须初始化，指针可以任何时候初始化  \n2、引用后不能再引用其他对像，指针则可以  \n3、引用不能为空，指针可以为空', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('551', '111212125', '1', 'C', '阅读以下程序：\nmain()\n{\n    int x;\n    scanf(“ % d”, &x);\n    if (x-- < 5)printf(“ % d”, x);\n    else printf(“ % d”, x++);\n}\n程序运行后，如果从键盘上输入5，则输出结果是', '3', '4', '5', '6', '', '', '', 'B', '首先，弄明白这题想考的是x++这种类型的运算顺序，针对本题，\n（x--<5）先用输入的x=5做比较不小于5,为false，应该进入else{}语句；\n再执行x--，x的值为4；\n执行else{}里的打印语句，先输出x的值4（控制台显示结果），\n再执行x++，变量x的值为5；\n程序结束\n延伸一下，++x作运算时，先把变量x的值加1，再去做其他运算\n如果把最后的输出改为printf(“ % d”, ++x);\n控制台显示的为5', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('552', '111212126', '1', 'C', '在小端序的机器中,如果 \nunion X{\n    int x;\n    char y[4];\n};\n如果:\nX a;\na.x=0x11223344;//16 进制 则:______', 'a.y[0]=0x11', 'a.y[1]=0x11', 'a.y[2]=0x11', 'a.y[3]=0x11', 'a.y[0]=0x22', 'a.y[3]=0x22', '', 'D', '1字节 = 8位(bit) 而char最开始为ascii码，从0~255，为8位，即1字节。 32位系统下变量的字节数： short 2字节 int 4字节即32位 float 4字节 double 8字节', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('553', '111212127', '1', 'C', '请将下列构造函数补充完整，使得程序的运行结果是5\n#include<iostream>\nusing namespace std;\nclass Sample{\n    public:\n        Sample(int x){\n            ________\n        }\n        ~Sample(){\n            if(p) delete p;\n        }\n        int show(){\n            return *p;\n        }\n', '*p=x;E21:J21', 'p=new int(x);', '*p=new int(x);', 'p=&x;', '', '', '', 'B', 'x是方法参数，则x的值和它所在的内存位置，都会在方法结束后失效，所以， 指针p不应该指向x的内存地址，而应该指向自己申请的一个地址空间，于是D错；而至于B和C，为何选B，由于 ‘p’和‘*p’，一个表示p指向的地址，一个则表示p指向的地址位置的值，所以，p = new int(x); 大致做了两件事：① 让p指向一个不会由于方法结束而失效的地址 ②将x值传给这个地址空间处， 所以最终，*p 也就是 p指向位置的值，就是x值。最终，选B。', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('554', '121224128', '1', 'JAVA', '有以下程序\n#include <stdio. h>\nmain()\n{ \n    int c[6] = {10,20,30,40,50,60}, * p, * s;\n    p = c; \n    s = &c[5];\n    printf(\"%d\\n\", s-p );\n}\n程序运行后的输出结果是？', '5', '50', '6', '60', '', '', '', 'A', '本题主要考查数组和指针。首先初始化一维数组c[ 6 ],语句p = c;指将c[ 0 ]元素的地址赋给指针变量p;语句s = &c[ 5 ];指将c[ 5 ]元素的地址赋给指针变量s。程序最后输出s – p,即结果为5', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('555', '121224129', '1', 'JAVA', '下面哪种情况下,B不能隐式转换为A?', 'class B:public A{}', 'class A:public B{}', 'class B{operator A();}', 'class A{A(const B&);}', '', '', '', 'B', '（A）A是基类，B是派生类，在公有继承方式下，派生类对象/对象指针、对象引用可以赋值给基类的对象/对象指针/对象引用（这时发生隐式转换）。因为派生类中包含了基类中的所有信息。注意：将派生类对象赋值给基类对象，会造成截切问题（派生类中专属的数据和行为会被丢弃掉）\n（B）A是派生类，B是基类。基类对象对象指针、对象引用不能赋值给派生类的对象/ 对象指针、对象引用。原因同上。\n（C） operator A()是B类中的一个类型转换函数，可以将B类对象隐式转换成B类对象。\n（D）A(const B&)是A类的一个', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('556', '121224130', '1', 'JAVA', '下列哪个用法那个是错误的（ ）', 'typedef void (*FUN)();', 'const int &ra;', 'extern const int array[256];', 'int* a;', '', '', '', 'B', '1、引用必须初始化，指针可以任何时候初始化  \n2、引用后不能再引用其他对像，指针则可以  \n3、引用不能为空，指针可以为空', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('557', '121224131', '1', 'JAVA', '阅读以下程序：\nmain()\n{\n    int x;\n    scanf(“ % d”, &x);\n    if (x-- < 5)printf(“ % d”, x);\n    else printf(“ % d”, x++);\n}\n程序运行后，如果从键盘上输入5，则输出结果是', '3', '4', '5', '6', '', '', '', 'B', '首先，弄明白这题想考的是x++这种类型的运算顺序，针对本题，\n（x--<5）先用输入的x=5做比较不小于5,为false，应该进入else{}语句；\n再执行x--，x的值为4；\n执行else{}里的打印语句，先输出x的值4（控制台显示结果），\n再执行x++，变量x的值为5；\n程序结束\n延伸一下，++x作运算时，先把变量x的值加1，再去做其他运算\n如果把最后的输出改为printf(“ % d”, ++x);\n控制台显示的为5', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('558', '121224132', '1', 'JAVA', '在小端序的机器中,如果 \nunion X{\n    int x;\n    char y[4];\n};\n如果:\nX a;\na.x=0x11223344;//16 进制 则:______', 'a.y[0]=0x11', 'a.y[1]=0x11', 'a.y[2]=0x11', 'a.y[3]=0x11', 'a.y[0]=0x22', 'a.y[3]=0x22', '', 'D', '1字节 = 8位(bit) 而char最开始为ascii码，从0~255，为8位，即1字节。 32位系统下变量的字节数： short 2字节 int 4字节即32位 float 4字节 double 8字节', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('559', '121224133', '1', 'JAVA', '请将下列构造函数补充完整，使得程序的运行结果是5\n#include<iostream>\nusing namespace std;\nclass Sample{\n    public:\n        Sample(int x){\n            ________\n        }\n        ~Sample(){\n            if(p) delete p;\n        }\n        int show(){\n            return *p;\n        }\n', '*p=x;E21:J21', 'p=new int(x);', '*p=new int(x);', 'p=&x;', '', '', '', 'B', 'x是方法参数，则x的值和它所在的内存位置，都会在方法结束后失效，所以， 指针p不应该指向x的内存地址，而应该指向自己申请的一个地址空间，于是D错；而至于B和C，为何选B，由于 ‘p’和‘*p’，一个表示p指向的地址，一个则表示p指向的地址位置的值，所以，p = new int(x); 大致做了两件事：① 让p指向一个不会由于方法结束而失效的地址 ②将x值传给这个地址空间处， 所以最终，*p 也就是 p指向位置的值，就是x值。最终，选B。', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('560', '111212134', '1', 'C', '有以下程序\n#include <stdio. h>\nmain()\n{ \n    int c[6] = {10,20,30,40,50,60}, * p, * s;\n    p = c; \n    s = &c[5];\n    printf(\"%d\\n\", s-p );\n}\n程序运行后的输出结果是？', '5', '50', '6', '60', '', '', '', 'A', '本题主要考查数组和指针。首先初始化一维数组c[ 6 ],语句p = c;指将c[ 0 ]元素的地址赋给指针变量p;语句s = &c[ 5 ];指将c[ 5 ]元素的地址赋给指针变量s。程序最后输出s – p,即结果为5', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('561', '111212135', '1', 'C', '下面哪种情况下,B不能隐式转换为A?', 'class B:public A{}', 'class A:public B{}', 'class B{operator A();}', 'class A{A(const B&);}', '', '', '', 'B', '（A）A是基类，B是派生类，在公有继承方式下，派生类对象/对象指针、对象引用可以赋值给基类的对象/对象指针/对象引用（这时发生隐式转换）。因为派生类中包含了基类中的所有信息。注意：将派生类对象赋值给基类对象，会造成截切问题（派生类中专属的数据和行为会被丢弃掉）\n（B）A是派生类，B是基类。基类对象对象指针、对象引用不能赋值给派生类的对象/ 对象指针、对象引用。原因同上。\n（C） operator A()是B类中的一个类型转换函数，可以将B类对象隐式转换成B类对象。\n（D）A(const B&)是A类的一个', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('562', '111212136', '1', 'C', '下列哪个用法那个是错误的（ ）', 'typedef void (*FUN)();', 'const int &ra;', 'extern const int array[256];', 'int* a;', '', '', '', 'B', '1、引用必须初始化，指针可以任何时候初始化  \n2、引用后不能再引用其他对像，指针则可以  \n3、引用不能为空，指针可以为空', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('563', '111212137', '1', 'C', '阅读以下程序：\nmain()\n{\n    int x;\n    scanf(“ % d”, &x);\n    if (x-- < 5)printf(“ % d”, x);\n    else printf(“ % d”, x++);\n}\n程序运行后，如果从键盘上输入5，则输出结果是', '3', '4', '5', '6', '', '', '', 'B', '首先，弄明白这题想考的是x++这种类型的运算顺序，针对本题，\n（x--<5）先用输入的x=5做比较不小于5,为false，应该进入else{}语句；\n再执行x--，x的值为4；\n执行else{}里的打印语句，先输出x的值4（控制台显示结果），\n再执行x++，变量x的值为5；\n程序结束\n延伸一下，++x作运算时，先把变量x的值加1，再去做其他运算\n如果把最后的输出改为printf(“ % d”, ++x);\n控制台显示的为5', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('564', '111212138', '1', 'C', '在小端序的机器中,如果 \nunion X{\n    int x;\n    char y[4];\n};\n如果:\nX a;\na.x=0x11223344;//16 进制 则:______', 'a.y[0]=0x11', 'a.y[1]=0x11', 'a.y[2]=0x11', 'a.y[3]=0x11', 'a.y[0]=0x22', 'a.y[3]=0x22', '', 'D', '1字节 = 8位(bit) 而char最开始为ascii码，从0~255，为8位，即1字节。 32位系统下变量的字节数： short 2字节 int 4字节即32位 float 4字节 double 8字节', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('565', '111212139', '1', 'C', '请将下列构造函数补充完整，使得程序的运行结果是5\n#include<iostream>\nusing namespace std;\nclass Sample{\n    public:\n        Sample(int x){\n            ________\n        }\n        ~Sample(){\n            if(p) delete p;\n        }\n        int show(){\n            return *p;\n        }\n', '*p=x;E21:J21', 'p=new int(x);', '*p=new int(x);', 'p=&x;', '', '', '', 'B', 'x是方法参数，则x的值和它所在的内存位置，都会在方法结束后失效，所以， 指针p不应该指向x的内存地址，而应该指向自己申请的一个地址空间，于是D错；而至于B和C，为何选B，由于 ‘p’和‘*p’，一个表示p指向的地址，一个则表示p指向的地址位置的值，所以，p = new int(x); 大致做了两件事：① 让p指向一个不会由于方法结束而失效的地址 ②将x值传给这个地址空间处， 所以最终，*p 也就是 p指向位置的值，就是x值。最终，选B。', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('566', '131212140', '1', 'H5', '有以下程序\n#include <stdio. h>\nmain()\n{ \n    int c[6] = {10,20,30,40,50,60}, * p, * s;\n    p = c; \n    s = &c[5];\n    printf(\"%d\\n\", s-p );\n}\n程序运行后的输出结果是？', '5', '50', '6', '60', '', '', '', 'A', '本题主要考查数组和指针。首先初始化一维数组c[ 6 ],语句p = c;指将c[ 0 ]元素的地址赋给指针变量p;语句s = &c[ 5 ];指将c[ 5 ]元素的地址赋给指针变量s。程序最后输出s – p,即结果为5', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('567', '131212141', '1', 'H5', '下面哪种情况下,B不能隐式转换为A?', 'class B:public A{}', 'class A:public B{}', 'class B{operator A();}', 'class A{A(const B&);}', '', '', '', 'B', '（A）A是基类，B是派生类，在公有继承方式下，派生类对象/对象指针、对象引用可以赋值给基类的对象/对象指针/对象引用（这时发生隐式转换）。因为派生类中包含了基类中的所有信息。注意：将派生类对象赋值给基类对象，会造成截切问题（派生类中专属的数据和行为会被丢弃掉）\n（B）A是派生类，B是基类。基类对象对象指针、对象引用不能赋值给派生类的对象/ 对象指针、对象引用。原因同上。\n（C） operator A()是B类中的一个类型转换函数，可以将B类对象隐式转换成B类对象。\n（D）A(const B&)是A类的一个', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('568', '131212142', '1', 'H5', '下列哪个用法那个是错误的（ ）', 'typedef void (*FUN)();', 'const int &ra;', 'extern const int array[256];', 'int* a;', '', '', '', 'B', '1、引用必须初始化，指针可以任何时候初始化  \n2、引用后不能再引用其他对像，指针则可以  \n3、引用不能为空，指针可以为空', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('569', '131212143', '1', 'H5', '阅读以下程序：\nmain()\n{\n    int x;\n    scanf(“ % d”, &x);\n    if (x-- < 5)printf(“ % d”, x);\n    else printf(“ % d”, x++);\n}\n程序运行后，如果从键盘上输入5，则输出结果是', '3', '4', '5', '6', '', '', '', 'B', '首先，弄明白这题想考的是x++这种类型的运算顺序，针对本题，\n（x--<5）先用输入的x=5做比较不小于5,为false，应该进入else{}语句；\n再执行x--，x的值为4；\n执行else{}里的打印语句，先输出x的值4（控制台显示结果），\n再执行x++，变量x的值为5；\n程序结束\n延伸一下，++x作运算时，先把变量x的值加1，再去做其他运算\n如果把最后的输出改为printf(“ % d”, ++x);\n控制台显示的为5', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('570', '131212144', '1', 'H5', '在小端序的机器中,如果 \nunion X{\n    int x;\n    char y[4];\n};\n如果:\nX a;\na.x=0x11223344;//16 进制 则:______', 'a.y[0]=0x11', 'a.y[1]=0x11', 'a.y[2]=0x11', 'a.y[3]=0x11', 'a.y[0]=0x22', 'a.y[3]=0x22', '', 'D', '1字节 = 8位(bit) 而char最开始为ascii码，从0~255，为8位，即1字节。 32位系统下变量的字节数： short 2字节 int 4字节即32位 float 4字节 double 8字节', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('571', '131212145', '1', 'H5', '请将下列构造函数补充完整，使得程序的运行结果是5\n#include<iostream>\nusing namespace std;\nclass Sample{\n    public:\n        Sample(int x){\n            ________\n        }\n        ~Sample(){\n            if(p) delete p;\n        }\n        int show(){\n            return *p;\n        }\n', '*p=x;E21:J21', 'p=new int(x);', '*p=new int(x);', 'p=&x;', '', '', '', 'B', 'x是方法参数，则x的值和它所在的内存位置，都会在方法结束后失效，所以， 指针p不应该指向x的内存地址，而应该指向自己申请的一个地址空间，于是D错；而至于B和C，为何选B，由于 ‘p’和‘*p’，一个表示p指向的地址，一个则表示p指向的地址位置的值，所以，p = new int(x); 大致做了两件事：① 让p指向一个不会由于方法结束而失效的地址 ②将x值传给这个地址空间处， 所以最终，*p 也就是 p指向位置的值，就是x值。最终，选B。', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('572', '151212146', '1', 'C#', '有以下程序\n#include <stdio. h>\nmain()\n{ \n    int c[6] = {10,20,30,40,50,60}, * p, * s;\n    p = c; \n    s = &c[5];\n    printf(\"%d\\n\", s-p );\n}\n程序运行后的输出结果是？', '5', '50', '6', '60', '', '', '', 'A', '本题主要考查数组和指针。首先初始化一维数组c[ 6 ],语句p = c;指将c[ 0 ]元素的地址赋给指针变量p;语句s = &c[ 5 ];指将c[ 5 ]元素的地址赋给指针变量s。程序最后输出s – p,即结果为5', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('573', '151212147', '1', 'C#', '下面哪种情况下,B不能隐式转换为A?', 'class B:public A{}', 'class A:public B{}', 'class B{operator A();}', 'class A{A(const B&);}', '', '', '', 'B', '（A）A是基类，B是派生类，在公有继承方式下，派生类对象/对象指针、对象引用可以赋值给基类的对象/对象指针/对象引用（这时发生隐式转换）。因为派生类中包含了基类中的所有信息。注意：将派生类对象赋值给基类对象，会造成截切问题（派生类中专属的数据和行为会被丢弃掉）\n（B）A是派生类，B是基类。基类对象对象指针、对象引用不能赋值给派生类的对象/ 对象指针、对象引用。原因同上。\n（C） operator A()是B类中的一个类型转换函数，可以将B类对象隐式转换成B类对象。\n（D）A(const B&)是A类的一个', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('574', '151212148', '1', 'C#', '下列哪个用法那个是错误的（ ）', 'typedef void (*FUN)();', 'const int &ra;', 'extern const int array[256];', 'int* a;', '', '', '', 'B', '1、引用必须初始化，指针可以任何时候初始化  \n2、引用后不能再引用其他对像，指针则可以  \n3、引用不能为空，指针可以为空', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('575', '151212149', '1', 'C#', '阅读以下程序：\nmain()\n{\n    int x;\n    scanf(“ % d”, &x);\n    if (x-- < 5)printf(“ % d”, x);\n    else printf(“ % d”, x++);\n}\n程序运行后，如果从键盘上输入5，则输出结果是', '3', '4', '5', '6', '', '', '', 'B', '首先，弄明白这题想考的是x++这种类型的运算顺序，针对本题，\n（x--<5）先用输入的x=5做比较不小于5,为false，应该进入else{}语句；\n再执行x--，x的值为4；\n执行else{}里的打印语句，先输出x的值4（控制台显示结果），\n再执行x++，变量x的值为5；\n程序结束\n延伸一下，++x作运算时，先把变量x的值加1，再去做其他运算\n如果把最后的输出改为printf(“ % d”, ++x);\n控制台显示的为5', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('576', '151212150', '1', 'C#', '在小端序的机器中,如果 \nunion X{\n    int x;\n    char y[4];\n};\n如果:\nX a;\na.x=0x11223344;//16 进制 则:______', 'a.y[0]=0x11', 'a.y[1]=0x11', 'a.y[2]=0x11', 'a.y[3]=0x11', 'a.y[0]=0x22', 'a.y[3]=0x22', '', 'D', '1字节 = 8位(bit) 而char最开始为ascii码，从0~255，为8位，即1字节。 32位系统下变量的字节数： short 2字节 int 4字节即32位 float 4字节 double 8字节', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('577', '151212151', '1', 'C#', '请将下列构造函数补充完整，使得程序的运行结果是5\n#include<iostream>\nusing namespace std;\nclass Sample{\n    public:\n        Sample(int x){\n            ________\n        }\n        ~Sample(){\n            if(p) delete p;\n        }\n        int show(){\n            return *p;\n        }\n', '*p=x;E21:J21', 'p=new int(x);', '*p=new int(x);', 'p=&x;', '', '', '', 'B', 'x是方法参数，则x的值和它所在的内存位置，都会在方法结束后失效，所以， 指针p不应该指向x的内存地址，而应该指向自己申请的一个地址空间，于是D错；而至于B和C，为何选B，由于 ‘p’和‘*p’，一个表示p指向的地址，一个则表示p指向的地址位置的值，所以，p = new int(x); 大致做了两件事：① 让p指向一个不会由于方法结束而失效的地址 ②将x值传给这个地址空间处， 所以最终，*p 也就是 p指向位置的值，就是x值。最终，选B。', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('578', '121221152', '1', 'JAVA', '有以下程序\n#include <stdio. h>\nmain()\n{ \n    int c[6] = {10,20,30,40,50,60}, * p, * s;\n    p = c; \n    s = &c[5];\n    printf(\"%d\\n\", s-p );\n}\n程序运行后的输出结果是？', '5', '50', '6', '60', '', '', '', 'A', '本题主要考查数组和指针。首先初始化一维数组c[ 6 ],语句p = c;指将c[ 0 ]元素的地址赋给指针变量p;语句s = &c[ 5 ];指将c[ 5 ]元素的地址赋给指针变量s。程序最后输出s – p,即结果为5', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('579', '121221153', '1', 'JAVA', '下面哪种情况下,B不能隐式转换为A?', 'class B:public A{}', 'class A:public B{}', 'class B{operator A();}', 'class A{A(const B&);}', '', '', '', 'B', '（A）A是基类，B是派生类，在公有继承方式下，派生类对象/对象指针、对象引用可以赋值给基类的对象/对象指针/对象引用（这时发生隐式转换）。因为派生类中包含了基类中的所有信息。注意：将派生类对象赋值给基类对象，会造成截切问题（派生类中专属的数据和行为会被丢弃掉）\n（B）A是派生类，B是基类。基类对象对象指针、对象引用不能赋值给派生类的对象/ 对象指针、对象引用。原因同上。\n（C） operator A()是B类中的一个类型转换函数，可以将B类对象隐式转换成B类对象。\n（D）A(const B&)是A类的一个', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('580', '121221154', '1', 'JAVA', '下列哪个用法那个是错误的（ ）', 'typedef void (*FUN)();', 'const int &ra;', 'extern const int array[256];', 'int* a;', '', '', '', 'B', '1、引用必须初始化，指针可以任何时候初始化  \n2、引用后不能再引用其他对像，指针则可以  \n3、引用不能为空，指针可以为空', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('581', '121221155', '1', 'JAVA', '阅读以下程序：\nmain()\n{\n    int x;\n    scanf(“ % d”, &x);\n    if (x-- < 5)printf(“ % d”, x);\n    else printf(“ % d”, x++);\n}\n程序运行后，如果从键盘上输入5，则输出结果是', '3', '4', '5', '6', '', '', '', 'B', '首先，弄明白这题想考的是x++这种类型的运算顺序，针对本题，\n（x--<5）先用输入的x=5做比较不小于5,为false，应该进入else{}语句；\n再执行x--，x的值为4；\n执行else{}里的打印语句，先输出x的值4（控制台显示结果），\n再执行x++，变量x的值为5；\n程序结束\n延伸一下，++x作运算时，先把变量x的值加1，再去做其他运算\n如果把最后的输出改为printf(“ % d”, ++x);\n控制台显示的为5', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('582', '121221156', '1', 'JAVA', '在小端序的机器中,如果 \nunion X{\n    int x;\n    char y[4];\n};\n如果:\nX a;\na.x=0x11223344;//16 进制 则:______', 'a.y[0]=0x11', 'a.y[1]=0x11', 'a.y[2]=0x11', 'a.y[3]=0x11', 'a.y[0]=0x22', 'a.y[3]=0x22', '', 'D', '1字节 = 8位(bit) 而char最开始为ascii码，从0~255，为8位，即1字节。 32位系统下变量的字节数： short 2字节 int 4字节即32位 float 4字节 double 8字节', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('583', '121221157', '1', 'JAVA', '请将下列构造函数补充完整，使得程序的运行结果是5\n#include<iostream>\nusing namespace std;\nclass Sample{\n    public:\n        Sample(int x){\n            ________\n        }\n        ~Sample(){\n            if(p) delete p;\n        }\n        int show(){\n            return *p;\n        }\n', '*p=x;E21:J21', 'p=new int(x);', '*p=new int(x);', 'p=&x;', '', '', '', 'B', 'x是方法参数，则x的值和它所在的内存位置，都会在方法结束后失效，所以， 指针p不应该指向x的内存地址，而应该指向自己申请的一个地址空间，于是D错；而至于B和C，为何选B，由于 ‘p’和‘*p’，一个表示p指向的地址，一个则表示p指向的地址位置的值，所以，p = new int(x); 大致做了两件事：① 让p指向一个不会由于方法结束而失效的地址 ②将x值传给这个地址空间处， 所以最终，*p 也就是 p指向位置的值，就是x值。最终，选B。', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('584', '121212158', '1', 'JAVA', '有以下程序\n#include <stdio. h>\nmain()\n{ \n    int c[6] = {10,20,30,40,50,60}, * p, * s;\n    p = c; \n    s = &c[5];\n    printf(\"%d\\n\", s-p );\n}\n程序运行后的输出结果是？', '5', '50', '6', '60', '', '', '', 'A', '本题主要考查数组和指针。首先初始化一维数组c[ 6 ],语句p = c;指将c[ 0 ]元素的地址赋给指针变量p;语句s = &c[ 5 ];指将c[ 5 ]元素的地址赋给指针变量s。程序最后输出s – p,即结果为5', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('585', '121212159', '1', 'JAVA', '下面哪种情况下,B不能隐式转换为A?', 'class B:public A{}', 'class A:public B{}', 'class B{operator A();}', 'class A{A(const B&);}', '', '', '', 'B', '（A）A是基类，B是派生类，在公有继承方式下，派生类对象/对象指针、对象引用可以赋值给基类的对象/对象指针/对象引用（这时发生隐式转换）。因为派生类中包含了基类中的所有信息。注意：将派生类对象赋值给基类对象，会造成截切问题（派生类中专属的数据和行为会被丢弃掉）\n（B）A是派生类，B是基类。基类对象对象指针、对象引用不能赋值给派生类的对象/ 对象指针、对象引用。原因同上。\n（C） operator A()是B类中的一个类型转换函数，可以将B类对象隐式转换成B类对象。\n（D）A(const B&)是A类的一个', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('586', '121212160', '1', 'JAVA', '下列哪个用法那个是错误的（ ）', 'typedef void (*FUN)();', 'const int &ra;', 'extern const int array[256];', 'int* a;', '', '', '', 'B', '1、引用必须初始化，指针可以任何时候初始化  \n2、引用后不能再引用其他对像，指针则可以  \n3、引用不能为空，指针可以为空', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('587', '121212161', '1', 'JAVA', '阅读以下程序：\nmain()\n{\n    int x;\n    scanf(“ % d”, &x);\n    if (x-- < 5)printf(“ % d”, x);\n    else printf(“ % d”, x++);\n}\n程序运行后，如果从键盘上输入5，则输出结果是', '3', '4', '5', '6', '', '', '', 'B', '首先，弄明白这题想考的是x++这种类型的运算顺序，针对本题，\n（x--<5）先用输入的x=5做比较不小于5,为false，应该进入else{}语句；\n再执行x--，x的值为4；\n执行else{}里的打印语句，先输出x的值4（控制台显示结果），\n再执行x++，变量x的值为5；\n程序结束\n延伸一下，++x作运算时，先把变量x的值加1，再去做其他运算\n如果把最后的输出改为printf(“ % d”, ++x);\n控制台显示的为5', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('588', '121212162', '1', 'JAVA', '在小端序的机器中,如果 \nunion X{\n    int x;\n    char y[4];\n};\n如果:\nX a;\na.x=0x11223344;//16 进制 则:______', 'a.y[0]=0x11', 'a.y[1]=0x11', 'a.y[2]=0x11', 'a.y[3]=0x11', 'a.y[0]=0x22', 'a.y[3]=0x22', '', 'D', '1字节 = 8位(bit) 而char最开始为ascii码，从0~255，为8位，即1字节。 32位系统下变量的字节数： short 2字节 int 4字节即32位 float 4字节 double 8字节', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('589', '121212163', '1', 'JAVA', '请将下列构造函数补充完整，使得程序的运行结果是5\n#include<iostream>\nusing namespace std;\nclass Sample{\n    public:\n        Sample(int x){\n            ________\n        }\n        ~Sample(){\n            if(p) delete p;\n        }\n        int show(){\n            return *p;\n        }\n', '*p=x;E21:J21', 'p=new int(x);', '*p=new int(x);', 'p=&x;', '', '', '', 'B', 'x是方法参数，则x的值和它所在的内存位置，都会在方法结束后失效，所以， 指针p不应该指向x的内存地址，而应该指向自己申请的一个地址空间，于是D错；而至于B和C，为何选B，由于 ‘p’和‘*p’，一个表示p指向的地址，一个则表示p指向的地址位置的值，所以，p = new int(x); 大致做了两件事：① 让p指向一个不会由于方法结束而失效的地址 ②将x值传给这个地址空间处， 所以最终，*p 也就是 p指向位置的值，就是x值。最终，选B。', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('590', '130101164', '1', 'H5', '有以下程序\n#include <stdio. h>\nmain()\n{ \n    int c[6] = {10,20,30,40,50,60}, * p, * s;\n    p = c; \n    s = &c[5];\n    printf(\"%d\\n\", s-p );\n}\n程序运行后的输出结果是？', '5', '50', '6', '60', '', '', '', 'A', '本题主要考查数组和指针。首先初始化一维数组c[ 6 ],语句p = c;指将c[ 0 ]元素的地址赋给指针变量p;语句s = &c[ 5 ];指将c[ 5 ]元素的地址赋给指针变量s。程序最后输出s – p,即结果为5', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('591', '130101165', '1', 'H5', '下面哪种情况下,B不能隐式转换为A?', 'class B:public A{}', 'class A:public B{}', 'class B{operator A();}', 'class A{A(const B&);}', '', '', '', 'B', '（A）A是基类，B是派生类，在公有继承方式下，派生类对象/对象指针、对象引用可以赋值给基类的对象/对象指针/对象引用（这时发生隐式转换）。因为派生类中包含了基类中的所有信息。注意：将派生类对象赋值给基类对象，会造成截切问题（派生类中专属的数据和行为会被丢弃掉）\n（B）A是派生类，B是基类。基类对象对象指针、对象引用不能赋值给派生类的对象/ 对象指针、对象引用。原因同上。\n（C） operator A()是B类中的一个类型转换函数，可以将B类对象隐式转换成B类对象。\n（D）A(const B&)是A类的一个', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('592', '130101166', '1', 'H5', '下列哪个用法那个是错误的（ ）', 'typedef void (*FUN)();', 'const int &ra;', 'extern const int array[256];', 'int* a;', '', '', '', 'B', '1、引用必须初始化，指针可以任何时候初始化  \n2、引用后不能再引用其他对像，指针则可以  \n3、引用不能为空，指针可以为空', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('593', '130101167', '1', 'H5', '阅读以下程序：\nmain()\n{\n    int x;\n    scanf(“ % d”, &x);\n    if (x-- < 5)printf(“ % d”, x);\n    else printf(“ % d”, x++);\n}\n程序运行后，如果从键盘上输入5，则输出结果是', '3', '4', '5', '6', '', '', '', 'B', '首先，弄明白这题想考的是x++这种类型的运算顺序，针对本题，\n（x--<5）先用输入的x=5做比较不小于5,为false，应该进入else{}语句；\n再执行x--，x的值为4；\n执行else{}里的打印语句，先输出x的值4（控制台显示结果），\n再执行x++，变量x的值为5；\n程序结束\n延伸一下，++x作运算时，先把变量x的值加1，再去做其他运算\n如果把最后的输出改为printf(“ % d”, ++x);\n控制台显示的为5', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('594', '130101168', '1', 'H5', '在小端序的机器中,如果 \nunion X{\n    int x;\n    char y[4];\n};\n如果:\nX a;\na.x=0x11223344;//16 进制 则:______', 'a.y[0]=0x11', 'a.y[1]=0x11', 'a.y[2]=0x11', 'a.y[3]=0x11', 'a.y[0]=0x22', 'a.y[3]=0x22', '', 'D', '1字节 = 8位(bit) 而char最开始为ascii码，从0~255，为8位，即1字节。 32位系统下变量的字节数： short 2字节 int 4字节即32位 float 4字节 double 8字节', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('595', '130101169', '1', 'H5', '请将下列构造函数补充完整，使得程序的运行结果是5\n#include<iostream>\nusing namespace std;\nclass Sample{\n    public:\n        Sample(int x){\n            ________\n        }\n        ~Sample(){\n            if(p) delete p;\n        }\n        int show(){\n            return *p;\n        }\n', '*p=x;E21:J21', 'p=new int(x);', '*p=new int(x);', 'p=&x;', '', '', '', 'B', 'x是方法参数，则x的值和它所在的内存位置，都会在方法结束后失效，所以， 指针p不应该指向x的内存地址，而应该指向自己申请的一个地址空间，于是D错；而至于B和C，为何选B，由于 ‘p’和‘*p’，一个表示p指向的地址，一个则表示p指向的地址位置的值，所以，p = new int(x); 大致做了两件事：① 让p指向一个不会由于方法结束而失效的地址 ②将x值传给这个地址空间处， 所以最终，*p 也就是 p指向位置的值，就是x值。最终，选B。', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('596', '111212170', '1', 'C', '有以下程序\n#include <stdio. h>\nmain()\n{ \n    int c[6] = {10,20,30,40,50,60}, * p, * s;\n    p = c; \n    s = &c[5];\n    printf(\"%d\\n\", s-p );\n}\n程序运行后的输出结果是？', '5', '50', '6', '60', '', '', '', 'A', '本题主要考查数组和指针。首先初始化一维数组c[ 6 ],语句p = c;指将c[ 0 ]元素的地址赋给指针变量p;语句s = &c[ 5 ];指将c[ 5 ]元素的地址赋给指针变量s。程序最后输出s – p,即结果为5', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('597', '111212171', '1', 'C', '下面哪种情况下,B不能隐式转换为A?', 'class B:public A{}', 'class A:public B{}', 'class B{operator A();}', 'class A{A(const B&);}', '', '', '', 'B', '（A）A是基类，B是派生类，在公有继承方式下，派生类对象/对象指针、对象引用可以赋值给基类的对象/对象指针/对象引用（这时发生隐式转换）。因为派生类中包含了基类中的所有信息。注意：将派生类对象赋值给基类对象，会造成截切问题（派生类中专属的数据和行为会被丢弃掉）\n（B）A是派生类，B是基类。基类对象对象指针、对象引用不能赋值给派生类的对象/ 对象指针、对象引用。原因同上。\n（C） operator A()是B类中的一个类型转换函数，可以将B类对象隐式转换成B类对象。\n（D）A(const B&)是A类的一个', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('598', '111212172', '1', 'C', '下列哪个用法那个是错误的（ ）', 'typedef void (*FUN)();', 'const int &ra;', 'extern const int array[256];', 'int* a;', '', '', '', 'B', '1、引用必须初始化，指针可以任何时候初始化  \n2、引用后不能再引用其他对像，指针则可以  \n3、引用不能为空，指针可以为空', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('599', '111212173', '1', 'C', '阅读以下程序：\nmain()\n{\n    int x;\n    scanf(“ % d”, &x);\n    if (x-- < 5)printf(“ % d”, x);\n    else printf(“ % d”, x++);\n}\n程序运行后，如果从键盘上输入5，则输出结果是', '3', '4', '5', '6', '', '', '', 'B', '首先，弄明白这题想考的是x++这种类型的运算顺序，针对本题，\n（x--<5）先用输入的x=5做比较不小于5,为false，应该进入else{}语句；\n再执行x--，x的值为4；\n执行else{}里的打印语句，先输出x的值4（控制台显示结果），\n再执行x++，变量x的值为5；\n程序结束\n延伸一下，++x作运算时，先把变量x的值加1，再去做其他运算\n如果把最后的输出改为printf(“ % d”, ++x);\n控制台显示的为5', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('600', '111212174', '1', 'C', '在小端序的机器中,如果 \nunion X{\n    int x;\n    char y[4];\n};\n如果:\nX a;\na.x=0x11223344;//16 进制 则:______', 'a.y[0]=0x11', 'a.y[1]=0x11', 'a.y[2]=0x11', 'a.y[3]=0x11', 'a.y[0]=0x22', 'a.y[3]=0x22', '', 'D', '1字节 = 8位(bit) 而char最开始为ascii码，从0~255，为8位，即1字节。 32位系统下变量的字节数： short 2字节 int 4字节即32位 float 4字节 double 8字节', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('601', '111212175', '1', 'C', '请将下列构造函数补充完整，使得程序的运行结果是5\n#include<iostream>\nusing namespace std;\nclass Sample{\n    public:\n        Sample(int x){\n            ________\n        }\n        ~Sample(){\n            if(p) delete p;\n        }\n        int show(){\n            return *p;\n        }\n', '*p=x;E21:J21', 'p=new int(x);', '*p=new int(x);', 'p=&x;', '', '', '', 'B', 'x是方法参数，则x的值和它所在的内存位置，都会在方法结束后失效，所以， 指针p不应该指向x的内存地址，而应该指向自己申请的一个地址空间，于是D错；而至于B和C，为何选B，由于 ‘p’和‘*p’，一个表示p指向的地址，一个则表示p指向的地址位置的值，所以，p = new int(x); 大致做了两件事：① 让p指向一个不会由于方法结束而失效的地址 ②将x值传给这个地址空间处， 所以最终，*p 也就是 p指向位置的值，就是x值。最终，选B。', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('602', '120101176', '1', 'JAVA', '有以下程序\n#include <stdio. h>\nmain()\n{ \n    int c[6] = {10,20,30,40,50,60}, * p, * s;\n    p = c; \n    s = &c[5];\n    printf(\"%d\\n\", s-p );\n}\n程序运行后的输出结果是？', '5', '50', '6', '60', '', '', '', 'A', '本题主要考查数组和指针。首先初始化一维数组c[ 6 ],语句p = c;指将c[ 0 ]元素的地址赋给指针变量p;语句s = &c[ 5 ];指将c[ 5 ]元素的地址赋给指针变量s。程序最后输出s – p,即结果为5', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('603', '120101177', '1', 'JAVA', '下面哪种情况下,B不能隐式转换为A?', 'class B:public A{}', 'class A:public B{}', 'class B{operator A();}', 'class A{A(const B&);}', '', '', '', 'B', '（A）A是基类，B是派生类，在公有继承方式下，派生类对象/对象指针、对象引用可以赋值给基类的对象/对象指针/对象引用（这时发生隐式转换）。因为派生类中包含了基类中的所有信息。注意：将派生类对象赋值给基类对象，会造成截切问题（派生类中专属的数据和行为会被丢弃掉）\n（B）A是派生类，B是基类。基类对象对象指针、对象引用不能赋值给派生类的对象/ 对象指针、对象引用。原因同上。\n（C） operator A()是B类中的一个类型转换函数，可以将B类对象隐式转换成B类对象。\n（D）A(const B&)是A类的一个', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('604', '120101178', '1', 'JAVA', '下列哪个用法那个是错误的（ ）', 'typedef void (*FUN)();', 'const int &ra;', 'extern const int array[256];', 'int* a;', '', '', '', 'B', '1、引用必须初始化，指针可以任何时候初始化  \n2、引用后不能再引用其他对像，指针则可以  \n3、引用不能为空，指针可以为空', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('605', '120101179', '1', 'JAVA', '阅读以下程序：\nmain()\n{\n    int x;\n    scanf(“ % d”, &x);\n    if (x-- < 5)printf(“ % d”, x);\n    else printf(“ % d”, x++);\n}\n程序运行后，如果从键盘上输入5，则输出结果是', '3', '4', '5', '6', '', '', '', 'B', '首先，弄明白这题想考的是x++这种类型的运算顺序，针对本题，\n（x--<5）先用输入的x=5做比较不小于5,为false，应该进入else{}语句；\n再执行x--，x的值为4；\n执行else{}里的打印语句，先输出x的值4（控制台显示结果），\n再执行x++，变量x的值为5；\n程序结束\n延伸一下，++x作运算时，先把变量x的值加1，再去做其他运算\n如果把最后的输出改为printf(“ % d”, ++x);\n控制台显示的为5', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('606', '120101180', '1', 'JAVA', '在小端序的机器中,如果 \nunion X{\n    int x;\n    char y[4];\n};\n如果:\nX a;\na.x=0x11223344;//16 进制 则:______', 'a.y[0]=0x11', 'a.y[1]=0x11', 'a.y[2]=0x11', 'a.y[3]=0x11', 'a.y[0]=0x22', 'a.y[3]=0x22', '', 'D', '1字节 = 8位(bit) 而char最开始为ascii码，从0~255，为8位，即1字节。 32位系统下变量的字节数： short 2字节 int 4字节即32位 float 4字节 double 8字节', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('607', '120101181', '1', 'JAVA', '请将下列构造函数补充完整，使得程序的运行结果是5\n#include<iostream>\nusing namespace std;\nclass Sample{\n    public:\n        Sample(int x){\n            ________\n        }\n        ~Sample(){\n            if(p) delete p;\n        }\n        int show(){\n            return *p;\n        }\n', '*p=x;E21:J21', 'p=new int(x);', '*p=new int(x);', 'p=&x;', '', '', '', 'B', 'x是方法参数，则x的值和它所在的内存位置，都会在方法结束后失效，所以， 指针p不应该指向x的内存地址，而应该指向自己申请的一个地址空间，于是D错；而至于B和C，为何选B，由于 ‘p’和‘*p’，一个表示p指向的地址，一个则表示p指向的地址位置的值，所以，p = new int(x); 大致做了两件事：① 让p指向一个不会由于方法结束而失效的地址 ②将x值传给这个地址空间处， 所以最终，*p 也就是 p指向位置的值，就是x值。最终，选B。', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('608', '120102182', '1', 'JAVA', '有以下程序\n#include <stdio. h>\nmain()\n{ \n    int c[6] = {10,20,30,40,50,60}, * p, * s;\n    p = c; \n    s = &c[5];\n    printf(\"%d\\n\", s-p );\n}\n程序运行后的输出结果是？', '5', '50', '6', '60', '', '', '', 'A', '本题主要考查数组和指针。首先初始化一维数组c[ 6 ],语句p = c;指将c[ 0 ]元素的地址赋给指针变量p;语句s = &c[ 5 ];指将c[ 5 ]元素的地址赋给指针变量s。程序最后输出s – p,即结果为5', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('609', '120102183', '1', 'JAVA', '下面哪种情况下,B不能隐式转换为A?', 'class B:public A{}', 'class A:public B{}', 'class B{operator A();}', 'class A{A(const B&);}', '', '', '', 'B', '（A）A是基类，B是派生类，在公有继承方式下，派生类对象/对象指针、对象引用可以赋值给基类的对象/对象指针/对象引用（这时发生隐式转换）。因为派生类中包含了基类中的所有信息。注意：将派生类对象赋值给基类对象，会造成截切问题（派生类中专属的数据和行为会被丢弃掉）\n（B）A是派生类，B是基类。基类对象对象指针、对象引用不能赋值给派生类的对象/ 对象指针、对象引用。原因同上。\n（C） operator A()是B类中的一个类型转换函数，可以将B类对象隐式转换成B类对象。\n（D）A(const B&)是A类的一个', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('610', '120102184', '1', 'JAVA', '下列哪个用法那个是错误的（ ）', 'typedef void (*FUN)();', 'const int &ra;', 'extern const int array[256];', 'int* a;', '', '', '', 'B', '1、引用必须初始化，指针可以任何时候初始化  \n2、引用后不能再引用其他对像，指针则可以  \n3、引用不能为空，指针可以为空', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('611', '120102185', '1', 'JAVA', '阅读以下程序：\nmain()\n{\n    int x;\n    scanf(“ % d”, &x);\n    if (x-- < 5)printf(“ % d”, x);\n    else printf(“ % d”, x++);\n}\n程序运行后，如果从键盘上输入5，则输出结果是', '3', '4', '5', '6', '', '', '', 'B', '首先，弄明白这题想考的是x++这种类型的运算顺序，针对本题，\n（x--<5）先用输入的x=5做比较不小于5,为false，应该进入else{}语句；\n再执行x--，x的值为4；\n执行else{}里的打印语句，先输出x的值4（控制台显示结果），\n再执行x++，变量x的值为5；\n程序结束\n延伸一下，++x作运算时，先把变量x的值加1，再去做其他运算\n如果把最后的输出改为printf(“ % d”, ++x);\n控制台显示的为5', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('612', '120102186', '1', 'JAVA', '在小端序的机器中,如果 \nunion X{\n    int x;\n    char y[4];\n};\n如果:\nX a;\na.x=0x11223344;//16 进制 则:______', 'a.y[0]=0x11', 'a.y[1]=0x11', 'a.y[2]=0x11', 'a.y[3]=0x11', 'a.y[0]=0x22', 'a.y[3]=0x22', '', 'D', '1字节 = 8位(bit) 而char最开始为ascii码，从0~255，为8位，即1字节。 32位系统下变量的字节数： short 2字节 int 4字节即32位 float 4字节 double 8字节', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('613', '120102187', '1', 'JAVA', '请将下列构造函数补充完整，使得程序的运行结果是5\n#include<iostream>\nusing namespace std;\nclass Sample{\n    public:\n        Sample(int x){\n            ________\n        }\n        ~Sample(){\n            if(p) delete p;\n        }\n        int show(){\n            return *p;\n        }\n', '*p=x;E21:J21', 'p=new int(x);', '*p=new int(x);', 'p=&x;', '', '', '', 'B', 'x是方法参数，则x的值和它所在的内存位置，都会在方法结束后失效，所以， 指针p不应该指向x的内存地址，而应该指向自己申请的一个地址空间，于是D错；而至于B和C，为何选B，由于 ‘p’和‘*p’，一个表示p指向的地址，一个则表示p指向的地址位置的值，所以，p = new int(x); 大致做了两件事：① 让p指向一个不会由于方法结束而失效的地址 ②将x值传给这个地址空间处， 所以最终，*p 也就是 p指向位置的值，就是x值。最终，选B。', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('614', '120203188', '1', 'JAVA', '有以下程序\n#include <stdio. h>\nmain()\n{ \n    int c[6] = {10,20,30,40,50,60}, * p, * s;\n    p = c; \n    s = &c[5];\n    printf(\"%d\\n\", s-p );\n}\n程序运行后的输出结果是？', '5', '50', '6', '60', '', '', '', 'A', '本题主要考查数组和指针。首先初始化一维数组c[ 6 ],语句p = c;指将c[ 0 ]元素的地址赋给指针变量p;语句s = &c[ 5 ];指将c[ 5 ]元素的地址赋给指针变量s。程序最后输出s – p,即结果为5', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('615', '120203189', '1', 'JAVA', '下面哪种情况下,B不能隐式转换为A?', 'class B:public A{}', 'class A:public B{}', 'class B{operator A();}', 'class A{A(const B&);}', '', '', '', 'B', '（A）A是基类，B是派生类，在公有继承方式下，派生类对象/对象指针、对象引用可以赋值给基类的对象/对象指针/对象引用（这时发生隐式转换）。因为派生类中包含了基类中的所有信息。注意：将派生类对象赋值给基类对象，会造成截切问题（派生类中专属的数据和行为会被丢弃掉）\n（B）A是派生类，B是基类。基类对象对象指针、对象引用不能赋值给派生类的对象/ 对象指针、对象引用。原因同上。\n（C） operator A()是B类中的一个类型转换函数，可以将B类对象隐式转换成B类对象。\n（D）A(const B&)是A类的一个', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('616', '120203190', '1', 'JAVA', '下列哪个用法那个是错误的（ ）', 'typedef void (*FUN)();', 'const int &ra;', 'extern const int array[256];', 'int* a;', '', '', '', 'B', '1、引用必须初始化，指针可以任何时候初始化  \n2、引用后不能再引用其他对像，指针则可以  \n3、引用不能为空，指针可以为空', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('617', '120203191', '1', 'JAVA', '阅读以下程序：\nmain()\n{\n    int x;\n    scanf(“ % d”, &x);\n    if (x-- < 5)printf(“ % d”, x);\n    else printf(“ % d”, x++);\n}\n程序运行后，如果从键盘上输入5，则输出结果是', '3', '4', '5', '6', '', '', '', 'B', '首先，弄明白这题想考的是x++这种类型的运算顺序，针对本题，\n（x--<5）先用输入的x=5做比较不小于5,为false，应该进入else{}语句；\n再执行x--，x的值为4；\n执行else{}里的打印语句，先输出x的值4（控制台显示结果），\n再执行x++，变量x的值为5；\n程序结束\n延伸一下，++x作运算时，先把变量x的值加1，再去做其他运算\n如果把最后的输出改为printf(“ % d”, ++x);\n控制台显示的为5', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('618', '120203192', '1', 'JAVA', '在小端序的机器中,如果 \nunion X{\n    int x;\n    char y[4];\n};\n如果:\nX a;\na.x=0x11223344;//16 进制 则:______', 'a.y[0]=0x11', 'a.y[1]=0x11', 'a.y[2]=0x11', 'a.y[3]=0x11', 'a.y[0]=0x22', 'a.y[3]=0x22', '', 'D', '1字节 = 8位(bit) 而char最开始为ascii码，从0~255，为8位，即1字节。 32位系统下变量的字节数： short 2字节 int 4字节即32位 float 4字节 double 8字节', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('619', '120203193', '1', 'JAVA', '请将下列构造函数补充完整，使得程序的运行结果是5\n#include<iostream>\nusing namespace std;\nclass Sample{\n    public:\n        Sample(int x){\n            ________\n        }\n        ~Sample(){\n            if(p) delete p;\n        }\n        int show(){\n            return *p;\n        }\n', '*p=x;E21:J21', 'p=new int(x);', '*p=new int(x);', 'p=&x;', '', '', '', 'B', 'x是方法参数，则x的值和它所在的内存位置，都会在方法结束后失效，所以， 指针p不应该指向x的内存地址，而应该指向自己申请的一个地址空间，于是D错；而至于B和C，为何选B，由于 ‘p’和‘*p’，一个表示p指向的地址，一个则表示p指向的地址位置的值，所以，p = new int(x); 大致做了两件事：① 让p指向一个不会由于方法结束而失效的地址 ②将x值传给这个地址空间处， 所以最终，*p 也就是 p指向位置的值，就是x值。最终，选B。', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('620', '141215194', '1', 'dataStructure', '有以下程序\n#include <stdio. h>\nmain()\n{ \n    int c[6] = {10,20,30,40,50,60}, * p, * s;\n    p = c; \n    s = &c[5];\n    printf(\"%d\\n\", s-p );\n}\n程序运行后的输出结果是？', '5', '50', '6', '60', '', '', '', 'A', '本题主要考查数组和指针。首先初始化一维数组c[ 6 ],语句p = c;指将c[ 0 ]元素的地址赋给指针变量p;语句s = &c[ 5 ];指将c[ 5 ]元素的地址赋给指针变量s。程序最后输出s – p,即结果为5', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('621', '141215195', '1', 'dataStructure', '下面哪种情况下,B不能隐式转换为A?', 'class B:public A{}', 'class A:public B{}', 'class B{operator A();}', 'class A{A(const B&);}', '', '', '', 'B', '（A）A是基类，B是派生类，在公有继承方式下，派生类对象/对象指针、对象引用可以赋值给基类的对象/对象指针/对象引用（这时发生隐式转换）。因为派生类中包含了基类中的所有信息。注意：将派生类对象赋值给基类对象，会造成截切问题（派生类中专属的数据和行为会被丢弃掉）\n（B）A是派生类，B是基类。基类对象对象指针、对象引用不能赋值给派生类的对象/ 对象指针、对象引用。原因同上。\n（C） operator A()是B类中的一个类型转换函数，可以将B类对象隐式转换成B类对象。\n（D）A(const B&)是A类的一个', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('622', '141215196', '1', 'dataStructure', '下列哪个用法那个是错误的（ ）', 'typedef void (*FUN)();', 'const int &ra;', 'extern const int array[256];', 'int* a;', '', '', '', 'B', '1、引用必须初始化，指针可以任何时候初始化  \n2、引用后不能再引用其他对像，指针则可以  \n3、引用不能为空，指针可以为空', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('623', '141215197', '1', 'dataStructure', '阅读以下程序：\nmain()\n{\n    int x;\n    scanf(“ % d”, &x);\n    if (x-- < 5)printf(“ % d”, x);\n    else printf(“ % d”, x++);\n}\n程序运行后，如果从键盘上输入5，则输出结果是', '3', '4', '5', '6', '', '', '', 'B', '首先，弄明白这题想考的是x++这种类型的运算顺序，针对本题，\n（x--<5）先用输入的x=5做比较不小于5,为false，应该进入else{}语句；\n再执行x--，x的值为4；\n执行else{}里的打印语句，先输出x的值4（控制台显示结果），\n再执行x++，变量x的值为5；\n程序结束\n延伸一下，++x作运算时，先把变量x的值加1，再去做其他运算\n如果把最后的输出改为printf(“ % d”, ++x);\n控制台显示的为5', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('624', '141215198', '1', 'dataStructure', '在小端序的机器中,如果 \nunion X{\n    int x;\n    char y[4];\n};\n如果:\nX a;\na.x=0x11223344;//16 进制 则:______', 'a.y[0]=0x11', 'a.y[1]=0x11', 'a.y[2]=0x11', 'a.y[3]=0x11', 'a.y[0]=0x22', 'a.y[3]=0x22', '', 'D', '1字节 = 8位(bit) 而char最开始为ascii码，从0~255，为8位，即1字节。 32位系统下变量的字节数： short 2字节 int 4字节即32位 float 4字节 double 8字节', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('625', '141215199', '1', 'dataStructure', '请将下列构造函数补充完整，使得程序的运行结果是5\n#include<iostream>\nusing namespace std;\nclass Sample{\n    public:\n        Sample(int x){\n            ________\n        }\n        ~Sample(){\n            if(p) delete p;\n        }\n        int show(){\n            return *p;\n        }\n', '*p=x;E21:J21', 'p=new int(x);', '*p=new int(x);', 'p=&x;', '', '', '', 'B', 'x是方法参数，则x的值和它所在的内存位置，都会在方法结束后失效，所以， 指针p不应该指向x的内存地址，而应该指向自己申请的一个地址空间，于是D错；而至于B和C，为何选B，由于 ‘p’和‘*p’，一个表示p指向的地址，一个则表示p指向的地址位置的值，所以，p = new int(x); 大致做了两件事：① 让p指向一个不会由于方法结束而失效的地址 ②将x值传给这个地址空间处， 所以最终，*p 也就是 p指向位置的值，就是x值。最终，选B。', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('626', '120101200', '1', 'JAVA', '有以下程序\n#include <stdio. h>\nmain()\n{ \n    int c[6] = {10,20,30,40,50,60}, * p, * s;\n    p = c; \n    s = &c[5];\n    printf(\"%d\\n\", s-p );\n}\n程序运行后的输出结果是？', '5', '50', '6', '60', '', '', '', 'A', '本题主要考查数组和指针。首先初始化一维数组c[ 6 ],语句p = c;指将c[ 0 ]元素的地址赋给指针变量p;语句s = &c[ 5 ];指将c[ 5 ]元素的地址赋给指针变量s。程序最后输出s – p,即结果为5', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('627', '120101201', '1', 'JAVA', '下面哪种情况下,B不能隐式转换为A?', 'class B:public A{}', 'class A:public B{}', 'class B{operator A();}', 'class A{A(const B&);}', '', '', '', 'B', '（A）A是基类，B是派生类，在公有继承方式下，派生类对象/对象指针、对象引用可以赋值给基类的对象/对象指针/对象引用（这时发生隐式转换）。因为派生类中包含了基类中的所有信息。注意：将派生类对象赋值给基类对象，会造成截切问题（派生类中专属的数据和行为会被丢弃掉）\n（B）A是派生类，B是基类。基类对象对象指针、对象引用不能赋值给派生类的对象/ 对象指针、对象引用。原因同上。\n（C） operator A()是B类中的一个类型转换函数，可以将B类对象隐式转换成B类对象。\n（D）A(const B&)是A类的一个', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('628', '120101202', '1', 'JAVA', '下列哪个用法那个是错误的（ ）', 'typedef void (*FUN)();', 'const int &ra;', 'extern const int array[256];', 'int* a;', '', '', '', 'B', '1、引用必须初始化，指针可以任何时候初始化  \n2、引用后不能再引用其他对像，指针则可以  \n3、引用不能为空，指针可以为空', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('629', '120101203', '1', 'JAVA', '阅读以下程序：\nmain()\n{\n    int x;\n    scanf(“ % d”, &x);\n    if (x-- < 5)printf(“ % d”, x);\n    else printf(“ % d”, x++);\n}\n程序运行后，如果从键盘上输入5，则输出结果是', '3', '4', '5', '6', '', '', '', 'B', '首先，弄明白这题想考的是x++这种类型的运算顺序，针对本题，\n（x--<5）先用输入的x=5做比较不小于5,为false，应该进入else{}语句；\n再执行x--，x的值为4；\n执行else{}里的打印语句，先输出x的值4（控制台显示结果），\n再执行x++，变量x的值为5；\n程序结束\n延伸一下，++x作运算时，先把变量x的值加1，再去做其他运算\n如果把最后的输出改为printf(“ % d”, ++x);\n控制台显示的为5', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('630', '120101204', '1', 'JAVA', '在小端序的机器中,如果 \nunion X{\n    int x;\n    char y[4];\n};\n如果:\nX a;\na.x=0x11223344;//16 进制 则:______', 'a.y[0]=0x11', 'a.y[1]=0x11', 'a.y[2]=0x11', 'a.y[3]=0x11', 'a.y[0]=0x22', 'a.y[3]=0x22', '', 'D', '1字节 = 8位(bit) 而char最开始为ascii码，从0~255，为8位，即1字节。 32位系统下变量的字节数： short 2字节 int 4字节即32位 float 4字节 double 8字节', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('631', '120101205', '1', 'JAVA', '请将下列构造函数补充完整，使得程序的运行结果是5\n#include<iostream>\nusing namespace std;\nclass Sample{\n    public:\n        Sample(int x){\n            ________\n        }\n        ~Sample(){\n            if(p) delete p;\n        }\n        int show(){\n            return *p;\n        }\n', '*p=x;E21:J21', 'p=new int(x);', '*p=new int(x);', 'p=&x;', '', '', '', 'B', 'x是方法参数，则x的值和它所在的内存位置，都会在方法结束后失效，所以， 指针p不应该指向x的内存地址，而应该指向自己申请的一个地址空间，于是D错；而至于B和C，为何选B，由于 ‘p’和‘*p’，一个表示p指向的地址，一个则表示p指向的地址位置的值，所以，p = new int(x); 大致做了两件事：① 让p指向一个不会由于方法结束而失效的地址 ②将x值传给这个地址空间处， 所以最终，*p 也就是 p指向位置的值，就是x值。最终，选B。', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('632', '1201011106', '1', 'JAVA', '有以下程序\n#include <stdio. h>\nmain()\n{ \n    int c[6] = {10,20,30,40,50,60}, * p, * s;\n    p = c; \n    s = &c[5];\n    printf(\"%d\\n\", s-p );\n}\n程序运行后的输出结果是？', '5', '50', '6', '60', '', '', '', 'A', '本题主要考查数组和指针。首先初始化一维数组c[ 6 ],语句p = c;指将c[ 0 ]元素的地址赋给指针变量p;语句s = &c[ 5 ];指将c[ 5 ]元素的地址赋给指针变量s。程序最后输出s – p,即结果为5', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('633', '1201011107', '1', 'JAVA', '下面哪种情况下,B不能隐式转换为A?', 'class B:public A{}', 'class A:public B{}', 'class B{operator A();}', 'class A{A(const B&);}', '', '', '', 'B', '（A）A是基类，B是派生类，在公有继承方式下，派生类对象/对象指针、对象引用可以赋值给基类的对象/对象指针/对象引用（这时发生隐式转换）。因为派生类中包含了基类中的所有信息。注意：将派生类对象赋值给基类对象，会造成截切问题（派生类中专属的数据和行为会被丢弃掉）\n（B）A是派生类，B是基类。基类对象对象指针、对象引用不能赋值给派生类的对象/ 对象指针、对象引用。原因同上。\n（C） operator A()是B类中的一个类型转换函数，可以将B类对象隐式转换成B类对象。\n（D）A(const B&)是A类的一个', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('634', '1201011108', '1', 'JAVA', '下列哪个用法那个是错误的（ ）', 'typedef void (*FUN)();', 'const int &ra;', 'extern const int array[256];', 'int* a;', '', '', '', 'B', '1、引用必须初始化，指针可以任何时候初始化  \n2、引用后不能再引用其他对像，指针则可以  \n3、引用不能为空，指针可以为空', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('635', '1201011109', '1', 'JAVA', '阅读以下程序：\nmain()\n{\n    int x;\n    scanf(“ % d”, &x);\n    if (x-- < 5)printf(“ % d”, x);\n    else printf(“ % d”, x++);\n}\n程序运行后，如果从键盘上输入5，则输出结果是', '3', '4', '5', '6', '', '', '', 'B', '首先，弄明白这题想考的是x++这种类型的运算顺序，针对本题，\n（x--<5）先用输入的x=5做比较不小于5,为false，应该进入else{}语句；\n再执行x--，x的值为4；\n执行else{}里的打印语句，先输出x的值4（控制台显示结果），\n再执行x++，变量x的值为5；\n程序结束\n延伸一下，++x作运算时，先把变量x的值加1，再去做其他运算\n如果把最后的输出改为printf(“ % d”, ++x);\n控制台显示的为5', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('636', '1201011110', '1', 'JAVA', '在小端序的机器中,如果 \nunion X{\n    int x;\n    char y[4];\n};\n如果:\nX a;\na.x=0x11223344;//16 进制 则:______', 'a.y[0]=0x11', 'a.y[1]=0x11', 'a.y[2]=0x11', 'a.y[3]=0x11', 'a.y[0]=0x22', 'a.y[3]=0x22', '', 'D', '1字节 = 8位(bit) 而char最开始为ascii码，从0~255，为8位，即1字节。 32位系统下变量的字节数： short 2字节 int 4字节即32位 float 4字节 double 8字节', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('637', '1201011111', '1', 'JAVA', '请将下列构造函数补充完整，使得程序的运行结果是5\n#include<iostream>\nusing namespace std;\nclass Sample{\n    public:\n        Sample(int x){\n            ________\n        }\n        ~Sample(){\n            if(p) delete p;\n        }\n        int show(){\n            return *p;\n        }\n', '*p=x;E21:J21', 'p=new int(x);', '*p=new int(x);', 'p=&x;', '', '', '', 'B', 'x是方法参数，则x的值和它所在的内存位置，都会在方法结束后失效，所以， 指针p不应该指向x的内存地址，而应该指向自己申请的一个地址空间，于是D错；而至于B和C，为何选B，由于 ‘p’和‘*p’，一个表示p指向的地址，一个则表示p指向的地址位置的值，所以，p = new int(x); 大致做了两件事：① 让p指向一个不会由于方法结束而失效的地址 ②将x值传给这个地址空间处， 所以最终，*p 也就是 p指向位置的值，就是x值。最终，选B。', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('638', '1301021112', '1', 'H5', '有以下程序\n#include <stdio. h>\nmain()\n{ \n    int c[6] = {10,20,30,40,50,60}, * p, * s;\n    p = c; \n    s = &c[5];\n    printf(\"%d\\n\", s-p );\n}\n程序运行后的输出结果是？', '5', '50', '6', '60', '', '', '', 'A', '本题主要考查数组和指针。首先初始化一维数组c[ 6 ],语句p = c;指将c[ 0 ]元素的地址赋给指针变量p;语句s = &c[ 5 ];指将c[ 5 ]元素的地址赋给指针变量s。程序最后输出s – p,即结果为5', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('639', '1301021113', '1', 'H5', '下面哪种情况下,B不能隐式转换为A?', 'class B:public A{}', 'class A:public B{}', 'class B{operator A();}', 'class A{A(const B&);}', '', '', '', 'B', '（A）A是基类，B是派生类，在公有继承方式下，派生类对象/对象指针、对象引用可以赋值给基类的对象/对象指针/对象引用（这时发生隐式转换）。因为派生类中包含了基类中的所有信息。注意：将派生类对象赋值给基类对象，会造成截切问题（派生类中专属的数据和行为会被丢弃掉）\n（B）A是派生类，B是基类。基类对象对象指针、对象引用不能赋值给派生类的对象/ 对象指针、对象引用。原因同上。\n（C） operator A()是B类中的一个类型转换函数，可以将B类对象隐式转换成B类对象。\n（D）A(const B&)是A类的一个', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('640', '1301021114', '1', 'H5', '下列哪个用法那个是错误的（ ）', 'typedef void (*FUN)();', 'const int &ra;', 'extern const int array[256];', 'int* a;', '', '', '', 'B', '1、引用必须初始化，指针可以任何时候初始化  \n2、引用后不能再引用其他对像，指针则可以  \n3、引用不能为空，指针可以为空', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('641', '1301021115', '1', 'H5', '阅读以下程序：\nmain()\n{\n    int x;\n    scanf(“ % d”, &x);\n    if (x-- < 5)printf(“ % d”, x);\n    else printf(“ % d”, x++);\n}\n程序运行后，如果从键盘上输入5，则输出结果是', '3', '4', '5', '6', '', '', '', 'B', '首先，弄明白这题想考的是x++这种类型的运算顺序，针对本题，\n（x--<5）先用输入的x=5做比较不小于5,为false，应该进入else{}语句；\n再执行x--，x的值为4；\n执行else{}里的打印语句，先输出x的值4（控制台显示结果），\n再执行x++，变量x的值为5；\n程序结束\n延伸一下，++x作运算时，先把变量x的值加1，再去做其他运算\n如果把最后的输出改为printf(“ % d”, ++x);\n控制台显示的为5', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('642', '1301021116', '1', 'H5', '在小端序的机器中,如果 \nunion X{\n    int x;\n    char y[4];\n};\n如果:\nX a;\na.x=0x11223344;//16 进制 则:______', 'a.y[0]=0x11', 'a.y[1]=0x11', 'a.y[2]=0x11', 'a.y[3]=0x11', 'a.y[0]=0x22', 'a.y[3]=0x22', '', 'D', '1字节 = 8位(bit) 而char最开始为ascii码，从0~255，为8位，即1字节。 32位系统下变量的字节数： short 2字节 int 4字节即32位 float 4字节 double 8字节', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('643', '1301021117', '1', 'H5', '请将下列构造函数补充完整，使得程序的运行结果是5\n#include<iostream>\nusing namespace std;\nclass Sample{\n    public:\n        Sample(int x){\n            ________\n        }\n        ~Sample(){\n            if(p) delete p;\n        }\n        int show(){\n            return *p;\n        }\n', '*p=x;E21:J21', 'p=new int(x);', '*p=new int(x);', 'p=&x;', '', '', '', 'B', 'x是方法参数，则x的值和它所在的内存位置，都会在方法结束后失效，所以， 指针p不应该指向x的内存地址，而应该指向自己申请的一个地址空间，于是D错；而至于B和C，为何选B，由于 ‘p’和‘*p’，一个表示p指向的地址，一个则表示p指向的地址位置的值，所以，p = new int(x); 大致做了两件事：① 让p指向一个不会由于方法结束而失效的地址 ②将x值传给这个地址空间处， 所以最终，*p 也就是 p指向位置的值，就是x值。最终，选B。', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('644', '1201011118', '1', 'JAVA', '有以下程序\n#include <stdio. h>\nmain()\n{ \n    int c[6] = {10,20,30,40,50,60}, * p, * s;\n    p = c; \n    s = &c[5];\n    printf(\"%d\\n\", s-p );\n}\n程序运行后的输出结果是？', '5', '50', '6', '60', '', '', '', 'A', '本题主要考查数组和指针。首先初始化一维数组c[ 6 ],语句p = c;指将c[ 0 ]元素的地址赋给指针变量p;语句s = &c[ 5 ];指将c[ 5 ]元素的地址赋给指针变量s。程序最后输出s – p,即结果为5', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('645', '1201011119', '1', 'JAVA', '下面哪种情况下,B不能隐式转换为A?', 'class B:public A{}', 'class A:public B{}', 'class B{operator A();}', 'class A{A(const B&);}', '', '', '', 'B', '（A）A是基类，B是派生类，在公有继承方式下，派生类对象/对象指针、对象引用可以赋值给基类的对象/对象指针/对象引用（这时发生隐式转换）。因为派生类中包含了基类中的所有信息。注意：将派生类对象赋值给基类对象，会造成截切问题（派生类中专属的数据和行为会被丢弃掉）\n（B）A是派生类，B是基类。基类对象对象指针、对象引用不能赋值给派生类的对象/ 对象指针、对象引用。原因同上。\n（C） operator A()是B类中的一个类型转换函数，可以将B类对象隐式转换成B类对象。\n（D）A(const B&)是A类的一个', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('646', '1201011120', '1', 'JAVA', '下列哪个用法那个是错误的（ ）', 'typedef void (*FUN)();', 'const int &ra;', 'extern const int array[256];', 'int* a;', '', '', '', 'B', '1、引用必须初始化，指针可以任何时候初始化  \n2、引用后不能再引用其他对像，指针则可以  \n3、引用不能为空，指针可以为空', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('647', '1201011121', '1', 'JAVA', '阅读以下程序：\nmain()\n{\n    int x;\n    scanf(“ % d”, &x);\n    if (x-- < 5)printf(“ % d”, x);\n    else printf(“ % d”, x++);\n}\n程序运行后，如果从键盘上输入5，则输出结果是', '3', '4', '5', '6', '', '', '', 'B', '首先，弄明白这题想考的是x++这种类型的运算顺序，针对本题，\n（x--<5）先用输入的x=5做比较不小于5,为false，应该进入else{}语句；\n再执行x--，x的值为4；\n执行else{}里的打印语句，先输出x的值4（控制台显示结果），\n再执行x++，变量x的值为5；\n程序结束\n延伸一下，++x作运算时，先把变量x的值加1，再去做其他运算\n如果把最后的输出改为printf(“ % d”, ++x);\n控制台显示的为5', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('648', '1201011122', '1', 'JAVA', '在小端序的机器中,如果 \nunion X{\n    int x;\n    char y[4];\n};\n如果:\nX a;\na.x=0x11223344;//16 进制 则:______', 'a.y[0]=0x11', 'a.y[1]=0x11', 'a.y[2]=0x11', 'a.y[3]=0x11', 'a.y[0]=0x22', 'a.y[3]=0x22', '', 'D', '1字节 = 8位(bit) 而char最开始为ascii码，从0~255，为8位，即1字节。 32位系统下变量的字节数： short 2字节 int 4字节即32位 float 4字节 double 8字节', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('649', '1201011123', '1', 'JAVA', '请将下列构造函数补充完整，使得程序的运行结果是5\n#include<iostream>\nusing namespace std;\nclass Sample{\n    public:\n        Sample(int x){\n            ________\n        }\n        ~Sample(){\n            if(p) delete p;\n        }\n        int show(){\n            return *p;\n        }\n', '*p=x;E21:J21', 'p=new int(x);', '*p=new int(x);', 'p=&x;', '', '', '', 'B', 'x是方法参数，则x的值和它所在的内存位置，都会在方法结束后失效，所以， 指针p不应该指向x的内存地址，而应该指向自己申请的一个地址空间，于是D错；而至于B和C，为何选B，由于 ‘p’和‘*p’，一个表示p指向的地址，一个则表示p指向的地址位置的值，所以，p = new int(x); 大致做了两件事：① 让p指向一个不会由于方法结束而失效的地址 ②将x值传给这个地址空间处， 所以最终，*p 也就是 p指向位置的值，就是x值。最终，选B。', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('650', '1802021124', '1', 'Mathematical', '有以下程序\n#include <stdio. h>\nmain()\n{ \n    int c[6] = {10,20,30,40,50,60}, * p, * s;\n    p = c; \n    s = &c[5];\n    printf(\"%d\\n\", s-p );\n}\n程序运行后的输出结果是？', '5', '50', '6', '60', '', '', '', 'A', '本题主要考查数组和指针。首先初始化一维数组c[ 6 ],语句p = c;指将c[ 0 ]元素的地址赋给指针变量p;语句s = &c[ 5 ];指将c[ 5 ]元素的地址赋给指针变量s。程序最后输出s – p,即结果为5', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('651', '1802021125', '1', 'Mathematical', '下面哪种情况下,B不能隐式转换为A?', 'class B:public A{}', 'class A:public B{}', 'class B{operator A();}', 'class A{A(const B&);}', '', '', '', 'B', '（A）A是基类，B是派生类，在公有继承方式下，派生类对象/对象指针、对象引用可以赋值给基类的对象/对象指针/对象引用（这时发生隐式转换）。因为派生类中包含了基类中的所有信息。注意：将派生类对象赋值给基类对象，会造成截切问题（派生类中专属的数据和行为会被丢弃掉）\n（B）A是派生类，B是基类。基类对象对象指针、对象引用不能赋值给派生类的对象/ 对象指针、对象引用。原因同上。\n（C） operator A()是B类中的一个类型转换函数，可以将B类对象隐式转换成B类对象。\n（D）A(const B&)是A类的一个', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('652', '1802021126', '1', 'Mathematical', '下列哪个用法那个是错误的（ ）', 'typedef void (*FUN)();', 'const int &ra;', 'extern const int array[256];', 'int* a;', '', '', '', 'B', '1、引用必须初始化，指针可以任何时候初始化  \n2、引用后不能再引用其他对像，指针则可以  \n3、引用不能为空，指针可以为空', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('653', '1802021127', '1', 'Mathematical', '阅读以下程序：\nmain()\n{\n    int x;\n    scanf(“ % d”, &x);\n    if (x-- < 5)printf(“ % d”, x);\n    else printf(“ % d”, x++);\n}\n程序运行后，如果从键盘上输入5，则输出结果是', '3', '4', '5', '6', '', '', '', 'B', '首先，弄明白这题想考的是x++这种类型的运算顺序，针对本题，\n（x--<5）先用输入的x=5做比较不小于5,为false，应该进入else{}语句；\n再执行x--，x的值为4；\n执行else{}里的打印语句，先输出x的值4（控制台显示结果），\n再执行x++，变量x的值为5；\n程序结束\n延伸一下，++x作运算时，先把变量x的值加1，再去做其他运算\n如果把最后的输出改为printf(“ % d”, ++x);\n控制台显示的为5', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('654', '1802021128', '1', 'Mathematical', '在小端序的机器中,如果 \nunion X{\n    int x;\n    char y[4];\n};\n如果:\nX a;\na.x=0x11223344;//16 进制 则:______', 'a.y[0]=0x11', 'a.y[1]=0x11', 'a.y[2]=0x11', 'a.y[3]=0x11', 'a.y[0]=0x22', 'a.y[3]=0x22', '', 'D', '1字节 = 8位(bit) 而char最开始为ascii码，从0~255，为8位，即1字节。 32位系统下变量的字节数： short 2字节 int 4字节即32位 float 4字节 double 8字节', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('655', '1802021129', '1', 'Mathematical', '请将下列构造函数补充完整，使得程序的运行结果是5\n#include<iostream>\nusing namespace std;\nclass Sample{\n    public:\n        Sample(int x){\n            ________\n        }\n        ~Sample(){\n            if(p) delete p;\n        }\n        int show(){\n            return *p;\n        }\n', '*p=x;E21:J21', 'p=new int(x);', '*p=new int(x);', 'p=&x;', '', '', '', 'B', 'x是方法参数，则x的值和它所在的内存位置，都会在方法结束后失效，所以， 指针p不应该指向x的内存地址，而应该指向自己申请的一个地址空间，于是D错；而至于B和C，为何选B，由于 ‘p’和‘*p’，一个表示p指向的地址，一个则表示p指向的地址位置的值，所以，p = new int(x); 大致做了两件事：① 让p指向一个不会由于方法结束而失效的地址 ②将x值传给这个地址空间处， 所以最终，*p 也就是 p指向位置的值，就是x值。最终，选B。', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('656', '1301021130', '1', 'H5', '有以下程序\n#include <stdio. h>\nmain()\n{ \n    int c[6] = {10,20,30,40,50,60}, * p, * s;\n    p = c; \n    s = &c[5];\n    printf(\"%d\\n\", s-p );\n}\n程序运行后的输出结果是？', '5', '50', '6', '60', '', '', '', 'A', '本题主要考查数组和指针。首先初始化一维数组c[ 6 ],语句p = c;指将c[ 0 ]元素的地址赋给指针变量p;语句s = &c[ 5 ];指将c[ 5 ]元素的地址赋给指针变量s。程序最后输出s – p,即结果为5', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('657', '1301021131', '1', 'H5', '下面哪种情况下,B不能隐式转换为A?', 'class B:public A{}', 'class A:public B{}', 'class B{operator A();}', 'class A{A(const B&);}', '', '', '', 'B', '（A）A是基类，B是派生类，在公有继承方式下，派生类对象/对象指针、对象引用可以赋值给基类的对象/对象指针/对象引用（这时发生隐式转换）。因为派生类中包含了基类中的所有信息。注意：将派生类对象赋值给基类对象，会造成截切问题（派生类中专属的数据和行为会被丢弃掉）\n（B）A是派生类，B是基类。基类对象对象指针、对象引用不能赋值给派生类的对象/ 对象指针、对象引用。原因同上。\n（C） operator A()是B类中的一个类型转换函数，可以将B类对象隐式转换成B类对象。\n（D）A(const B&)是A类的一个', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('658', '1301021132', '1', 'H5', '下列哪个用法那个是错误的（ ）', 'typedef void (*FUN)();', 'const int &ra;', 'extern const int array[256];', 'int* a;', '', '', '', 'B', '1、引用必须初始化，指针可以任何时候初始化  \n2、引用后不能再引用其他对像，指针则可以  \n3、引用不能为空，指针可以为空', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('659', '1301021133', '1', 'H5', '阅读以下程序：\nmain()\n{\n    int x;\n    scanf(“ % d”, &x);\n    if (x-- < 5)printf(“ % d”, x);\n    else printf(“ % d”, x++);\n}\n程序运行后，如果从键盘上输入5，则输出结果是', '3', '4', '5', '6', '', '', '', 'B', '首先，弄明白这题想考的是x++这种类型的运算顺序，针对本题，\n（x--<5）先用输入的x=5做比较不小于5,为false，应该进入else{}语句；\n再执行x--，x的值为4；\n执行else{}里的打印语句，先输出x的值4（控制台显示结果），\n再执行x++，变量x的值为5；\n程序结束\n延伸一下，++x作运算时，先把变量x的值加1，再去做其他运算\n如果把最后的输出改为printf(“ % d”, ++x);\n控制台显示的为5', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('660', '1301021134', '1', 'H5', '在小端序的机器中,如果 \nunion X{\n    int x;\n    char y[4];\n};\n如果:\nX a;\na.x=0x11223344;//16 进制 则:______', 'a.y[0]=0x11', 'a.y[1]=0x11', 'a.y[2]=0x11', 'a.y[3]=0x11', 'a.y[0]=0x22', 'a.y[3]=0x22', '', 'D', '1字节 = 8位(bit) 而char最开始为ascii码，从0~255，为8位，即1字节。 32位系统下变量的字节数： short 2字节 int 4字节即32位 float 4字节 double 8字节', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('661', '1301021135', '1', 'H5', '请将下列构造函数补充完整，使得程序的运行结果是5\n#include<iostream>\nusing namespace std;\nclass Sample{\n    public:\n        Sample(int x){\n            ________\n        }\n        ~Sample(){\n            if(p) delete p;\n        }\n        int show(){\n            return *p;\n        }\n', '*p=x;E21:J21', 'p=new int(x);', '*p=new int(x);', 'p=&x;', '', '', '', 'B', 'x是方法参数，则x的值和它所在的内存位置，都会在方法结束后失效，所以， 指针p不应该指向x的内存地址，而应该指向自己申请的一个地址空间，于是D错；而至于B和C，为何选B，由于 ‘p’和‘*p’，一个表示p指向的地址，一个则表示p指向的地址位置的值，所以，p = new int(x); 大致做了两件事：① 让p指向一个不会由于方法结束而失效的地址 ②将x值传给这个地址空间处， 所以最终，*p 也就是 p指向位置的值，就是x值。最终，选B。', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('662', '1402021136', '1', 'dataStructure', '有以下程序\n#include <stdio. h>\nmain()\n{ \n    int c[6] = {10,20,30,40,50,60}, * p, * s;\n    p = c; \n    s = &c[5];\n    printf(\"%d\\n\", s-p );\n}\n程序运行后的输出结果是？', '5', '50', '6', '60', '', '', '', 'A', '本题主要考查数组和指针。首先初始化一维数组c[ 6 ],语句p = c;指将c[ 0 ]元素的地址赋给指针变量p;语句s = &c[ 5 ];指将c[ 5 ]元素的地址赋给指针变量s。程序最后输出s – p,即结果为5', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('663', '1402021137', '1', 'dataStructure', '下面哪种情况下,B不能隐式转换为A?', 'class B:public A{}', 'class A:public B{}', 'class B{operator A();}', 'class A{A(const B&);}', '', '', '', 'B', '（A）A是基类，B是派生类，在公有继承方式下，派生类对象/对象指针、对象引用可以赋值给基类的对象/对象指针/对象引用（这时发生隐式转换）。因为派生类中包含了基类中的所有信息。注意：将派生类对象赋值给基类对象，会造成截切问题（派生类中专属的数据和行为会被丢弃掉）\n（B）A是派生类，B是基类。基类对象对象指针、对象引用不能赋值给派生类的对象/ 对象指针、对象引用。原因同上。\n（C） operator A()是B类中的一个类型转换函数，可以将B类对象隐式转换成B类对象。\n（D）A(const B&)是A类的一个', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('664', '1121211138', '1', 'C', '有以下程序\n#include <stdio. h>\nmain()\n{ \n    int c[6] = {10,20,30,40,50,60}, * p, * s;\n    p = c; \n    s = &c[5];\n    printf(\"%d\\n\", s-p );\n}\n程序运行后的输出结果是？', '5', '50', '6', '60', '', '', '', 'A', '本题主要考查数组和指针。首先初始化一维数组c[ 6 ],语句p = c;指将c[ 0 ]元素的地址赋给指针变量p;语句s = &c[ 5 ];指将c[ 5 ]元素的地址赋给指针变量s。程序最后输出s – p,即结果为5', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('665', '1121211139', '1', 'C', '下面哪种情况下,B不能隐式转换为A?', 'class B:public A{}', 'class A:public B{}', 'class B{operator A();}', 'class A{A(const B&);}', '', '', '', 'B', '（A）A是基类，B是派生类，在公有继承方式下，派生类对象/对象指针、对象引用可以赋值给基类的对象/对象指针/对象引用（这时发生隐式转换）。因为派生类中包含了基类中的所有信息。注意：将派生类对象赋值给基类对象，会造成截切问题（派生类中专属的数据和行为会被丢弃掉）\n（B）A是派生类，B是基类。基类对象对象指针、对象引用不能赋值给派生类的对象/ 对象指针、对象引用。原因同上。\n（C） operator A()是B类中的一个类型转换函数，可以将B类对象隐式转换成B类对象。\n（D）A(const B&)是A类的一个', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('666', '1201211140', '1', 'JAVA', '有以下程序\n#include <stdio. h>\nmain()\n{ \n    int c[6] = {10,20,30,40,50,60}, * p, * s;\n    p = c; \n    s = &c[5];\n    printf(\"%d\\n\", s-p );\n}\n程序运行后的输出结果是？', '5', '50', '6', '60', '', '', '', 'A', '本题主要考查数组和指针。首先初始化一维数组c[ 6 ],语句p = c;指将c[ 0 ]元素的地址赋给指针变量p;语句s = &c[ 5 ];指将c[ 5 ]元素的地址赋给指针变量s。程序最后输出s – p,即结果为5', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('667', '1202021141', '1', 'JAVA', '有以下程序\n#include <stdio. h>\nmain()\n{ \n    int c[6] = {10,20,30,40,50,60}, * p, * s;\n    p = c; \n    s = &c[5];\n    printf(\"%d\\n\", s-p );\n}\n程序运行后的输出结果是？', '5', '50', '6', '60', '', '', '', 'A', '本题主要考查数组和指针。首先初始化一维数组c[ 6 ],语句p = c;指将c[ 0 ]元素的地址赋给指针变量p;语句s = &c[ 5 ];指将c[ 5 ]元素的地址赋给指针变量s。程序最后输出s – p,即结果为5', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('668', '1802021142', '1', 'Mathematical', '有以下程序\n#include <stdio. h>\nmain()\n{ \n    int c[6] = {10,20,30,40,50,60}, * p, * s;\n    p = c; \n    s = &c[5];\n    printf(\"%d\\n\", s-p );\n}\n程序运行后的输出结果是？', '5', '50', '6', '60', '', '', '', 'A', '本题主要考查数组和指针。首先初始化一维数组c[ 6 ],语句p = c;指将c[ 0 ]元素的地址赋给指针变量p;语句s = &c[ 5 ];指将c[ 5 ]元素的地址赋给指针变量s。程序最后输出s – p,即结果为5', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('669', '1401021143', '1', 'dataStructure', '有以下程序\n#include <stdio. h>\nmain()\n{ \n    int c[6] = {10,20,30,40,50,60}, * p, * s;\n    p = c; \n    s = &c[5];\n    printf(\"%d\\n\", s-p );\n}\n程序运行后的输出结果是？', '5', '50', '6', '60', '', '', '', 'A', '本题主要考查数组和指针。首先初始化一维数组c[ 6 ],语句p = c;指将c[ 0 ]元素的地址赋给指针变量p;语句s = &c[ 5 ];指将c[ 5 ]元素的地址赋给指针变量s。程序最后输出s – p,即结果为5', '1', null, null, null);
INSERT INTO `questionBank` VALUES ('670', '1901021144', '1', 'other', '有以下程序\n#include <stdio. h>\nmain()\n{ \n    int c[6] = {10,20,30,40,50,60}, * p, * s;\n    p = c; \n    s = &c[5];\n    printf(\"%d\\n\", s-p );\n}\n程序运行后的输出结果是？', '5', '50', '6', '60', '', '', '', 'A', '本题主要考查数组和指针。首先初始化一维数组c[ 6 ],语句p = c;指将c[ 0 ]元素的地址赋给指针变量p;语句s = &c[ 5 ];指将c[ 5 ]元素的地址赋给指针变量s。程序最后输出s – p,即结果为5', '1', null, null, null);

-- ----------------------------
-- Table structure for `studentUser`
-- ----------------------------
DROP TABLE IF EXISTS `studentUser`;
CREATE TABLE `studentUser` (
  `studentId` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `password` varchar(255) NOT NULL,
  `type` varchar(255) NOT NULL,
  `studentRealName` varchar(255) DEFAULT NULL,
  `school` varchar(255) DEFAULT NULL,
  `college` varchar(255) DEFAULT NULL,
  `studentNumber` varchar(255) DEFAULT NULL,
  `token` varchar(255) NOT NULL,
  `status` int(11) NOT NULL,
  `mail` varchar(255) NOT NULL,
  `major` varchar(255) DEFAULT NULL,
  `registerTime` datetime DEFAULT NULL,
  PRIMARY KEY (`studentId`)
) ENGINE=InnoDB AUTO_INCREMENT=77 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of studentUser
-- ----------------------------
INSERT INTO `studentUser` VALUES ('1', '13047995566', '123456', 'student', '小诺诺', '南工', '信息工程学院', '2014102202', '', '1', '1090336400@qq.com', '计科', null);
INSERT INTO `studentUser` VALUES ('2', '13047907763', '123', 'student', '546456456456', 'bnn', 'hjm', '2014102195', '', '1', '', null, null);
INSERT INTO `studentUser` VALUES ('5', 'test1', '1', 'student', '3321321', '312321312321', '3123213321321', '321321', '4a3252a5edf8fcaa8bde0bfcce79560d', '1', 'wly19960911@qq.com', null, '2017-04-22 16:00:14');
INSERT INTO `studentUser` VALUES ('6', 'test2', '123456', 'student', null, null, null, null, '80660e29103d525b694f45e34e23f498', '1', 'wly19960911', null, '2017-04-22 16:04:26');
INSERT INTO `studentUser` VALUES ('7', 'jiasda', 'ds', 'student', null, null, null, null, '19854eb05aabbc9767e7bb7df1182490', '0', '1942943680', null, '2017-04-22 16:19:57');
INSERT INTO `studentUser` VALUES ('8', 'sadfasdf', 'sad', 'student', null, null, null, null, 'f3ebc2a576ec3dbb006e0f1bd6096eea', '1', '1942943680@qq.com', null, '2017-04-22 16:21:30');
INSERT INTO `studentUser` VALUES ('9', 'jjiasdffdvgh', 'safd', 'student', null, null, null, null, '38d72bbeb5cb3fcebe9e6896ac10c757', '1', '1942943680', null, '2017-04-22 16:29:49');
INSERT INTO `studentUser` VALUES ('10', 'jjiasdffdvg', 'safd', 'student', null, null, null, null, 'a4c0fe6643809625a5c927ce1ec4965c', '1', '1942943680', null, '2017-04-22 16:33:58');
INSERT INTO `studentUser` VALUES ('11', 'sadfasd', 'sdaf', 'student', null, null, null, null, '6d21ea79d3b0b0f2daafea66a8b00879', '1', '1942943680', null, '2017-04-23 17:11:07');
INSERT INTO `studentUser` VALUES ('33', '3', '3', 'student', null, null, null, null, '', '1', '', null, null);
INSERT INTO `studentUser` VALUES ('34', 'dgg', 'fsa', 'student', null, null, null, null, '63e9a0215f3c5a44717c0d31d7e9b415', '1', '1942943680@qq.com', null, '2017-04-23 18:30:42');
INSERT INTO `studentUser` VALUES ('35', 'test3', '1', 'student', null, null, null, null, '536d69ec353e44061a437cf571f01e71', '0', 'wly19960911@qq.com', null, '2017-04-28 14:36:17');
INSERT INTO `studentUser` VALUES ('37', 'test4', '1', 'student', null, null, null, null, 'f6646c41378602b24279e8a383bd2b4f', '0', '1435564402', null, '2017-04-28 14:52:32');
INSERT INTO `studentUser` VALUES ('38', '13047907769', '123456', 'student', null, null, null, null, '9f2de8588b35d1793d595772e4b27e2f', '1', '1090336400@qq.com', null, '2017-04-28 15:38:05');
INSERT INTO `studentUser` VALUES ('39', '13047907765', '123123', 'student', null, null, null, null, 'b749ebe15134f9c091c8e16f6ffc44cc', '0', '1090336400@qq.com', null, '2017-04-28 20:01:54');
INSERT INTO `studentUser` VALUES ('40', '13888888888', '111111', 'student', null, null, null, null, '0dc41f9d4ea8be3b28ffaa1be60066c6', '1', 'wly19960911@qq.com', null, '2017-04-28 20:03:45');
INSERT INTO `studentUser` VALUES ('41', 'test5', '1', 'student', null, null, null, null, '96b468c912f633abc8692a06f76115ee', '1', '2409247823@qq.com', null, '2017-04-28 20:20:50');
INSERT INTO `studentUser` VALUES ('42', '111', '123', 'student', null, null, null, null, 'e49274516a27487f894ae956166eb7a4', '0', '13@qq.com', null, '2017-04-29 14:47:24');
INSERT INTO `studentUser` VALUES ('43', '1111', '123', 'student', null, null, null, null, 'd4f37ba0ac6672f7030e178079d72315', '0', '13@qq.com', null, '2017-04-29 14:50:38');
INSERT INTO `studentUser` VALUES ('44', '1011', '123', 'student', null, null, null, null, 'e5e70ec0b243c0766d90dca1c05971ac', '0', '13@qq.com', null, '2017-04-29 14:54:08');
INSERT INTO `studentUser` VALUES ('45', '1121', '123', 'student', null, null, null, null, '2737ad4602db471f9e3f05ac29044dfc', '0', '13@qq.com', null, '2017-04-29 15:19:11');
INSERT INTO `studentUser` VALUES ('46', '1231', '123456', 'student', null, null, null, null, '2b7976c4b33a0fe253955bbd4f22be9f', '0', 'wly19960911@qq.com', null, '2017-04-29 15:27:21');
INSERT INTO `studentUser` VALUES ('47', '123132', '123', 'student', null, null, null, null, '1a6ff096385e1247fee5ed964f9e704a', '0', '132@qq.com', null, '2017-04-29 15:29:52');
INSERT INTO `studentUser` VALUES ('48', 'aaa', 'aaa', 'student', null, null, null, null, '0b4e7a0e5fe84ad35fb5f95b9ceeac79', '0', 'aaa@qq.com', null, '2017-04-29 15:32:49');
INSERT INTO `studentUser` VALUES ('49', 'aaa11', 'aaa', 'student', null, null, null, null, '90cd97401f61ebcd403aebbdff56534a', '0', 'aaa@qq.com', null, '2017-04-29 15:34:55');
INSERT INTO `studentUser` VALUES ('50', 'aaa112', 'aaa', 'student', null, null, null, null, '652bc34399aa456a358ea96167e7e0b3', '0', 'aaa@qq.com', null, '2017-04-29 15:41:00');
INSERT INTO `studentUser` VALUES ('51', 'aaa1121', 'aaa', 'student', null, null, null, null, 'a9cbfc1c292b88f531c5bd1251e2a333', '0', 'aaa@qq.com', null, '2017-04-29 15:41:17');
INSERT INTO `studentUser` VALUES ('52', 'rewqrqa', '1', 'student', null, null, null, null, '9868ee3854e748291f3cf613aca5f2ef', '0', '1@qq.com', null, '2017-04-29 15:47:04');
INSERT INTO `studentUser` VALUES ('53', 'rewqrqa3132', '1', 'student', null, null, null, null, '12cb2346a0a929e40c4eacecc5da9332', '0', '1@qq.com', null, '2017-04-29 15:54:57');
INSERT INTO `studentUser` VALUES ('54', 'test51141', '1', 'student', null, null, null, null, '1175e67c560c10a673334be77a66741d', '0', '2409247823@qq.com', null, '2017-04-29 16:00:39');
INSERT INTO `studentUser` VALUES ('55', 'eqweq', '1', 'student', null, null, null, null, '3f4114a0c1e279c0e6b2f02e0725d1f0', '0', '1@qq.com', null, '2017-04-29 17:13:07');
INSERT INTO `studentUser` VALUES ('56', '1132131221', '123', 'student', null, null, null, null, '142e48a27e99915986b5d7b4f767f30e', '0', '13@qq.com', null, '2017-04-29 17:21:22');
INSERT INTO `studentUser` VALUES ('57', '11321312211', '123', 'student', null, null, null, null, 'b3648f5349fc68583cc11cac3c2ae69c', '0', '13@qq.com', null, '2017-04-29 17:31:17');
INSERT INTO `studentUser` VALUES ('58', '122222', '123456', 'student', null, null, null, null, '27a5820cb7f37058f636a6636d52a705', '0', '1090336400@qq.com', null, '2017-04-29 17:41:55');
INSERT INTO `studentUser` VALUES ('59', '1222221', '123456', 'student', null, null, null, null, 'e6f4141f786d321ed6fb2f65ade66b01', '0', '1090336400@qq.com', null, '2017-04-29 17:44:27');
INSERT INTO `studentUser` VALUES ('60', '113zc213114221', '123', 'student', null, null, null, null, '824f539214b5d4c621e4b86d5dd30026', '0', '13@qq.com', null, '2017-04-29 17:55:14');
INSERT INTO `studentUser` VALUES ('61', 'test11', '1', 'student', null, null, null, null, '4061863caf7f28c0b0346719e764d561', '0', 'wly19960911@qq.com', null, '2017-04-29 17:58:14');
INSERT INTO `studentUser` VALUES ('62', 'doubi', '1', 'student', null, null, null, null, '3dd026ec0fd8578945cd49a5b4946beb', '0', 'wly19960911@qq.com', null, '2017-04-29 18:23:17');
INSERT INTO `studentUser` VALUES ('63', 'doubi1', '1', 'student', null, null, null, null, '117ad2ad3bad55a208bc7276d9d4888f', '0', 'wly19960911@qq.com', null, '2017-04-29 18:34:17');
INSERT INTO `studentUser` VALUES ('64', 'test123', '123', 'student', null, null, null, null, '3b4df34a31840b455ba7e8be9659030d', '0', 'wly19960911@qq.com', null, '2017-04-29 18:52:07');
INSERT INTO `studentUser` VALUES ('65', 'doubi2', '1', 'student', null, null, null, null, '38fc22a11babd68cfa350a09d978ab29', '1', 'wly19960911@qq.com', null, '2017-04-30 17:23:37');
INSERT INTO `studentUser` VALUES ('66', '123456789', '1', 'student', null, null, null, null, '0f7e44a922df352c05c5f73cb40ba115', '0', 'wly19960911@qq.com', null, '2017-04-30 21:42:32');
INSERT INTO `studentUser` VALUES ('67', '123456', '1', 'student', null, null, null, null, 'aaa42296669b958c3cee6c0475c8093e', '0', 'wly19960911@qq.com', null, '2017-04-30 21:43:09');
INSERT INTO `studentUser` VALUES ('68', '123123', '1', 'student', null, null, null, null, '8d4646eb2d7067126eb08adb0672f7bb', '0', 'wly19960911@qq.com', null, '2017-04-30 21:44:29');
INSERT INTO `studentUser` VALUES ('69', '123123123', '1', 'student', null, null, null, null, '1b2de2499e5f93e00a5a90e79a9da4b1', '0', 'wly19960911@qq.com', null, '2017-04-30 21:53:19');
INSERT INTO `studentUser` VALUES ('70', '123321', '1', 'student', null, null, null, null, '2b273b48d465b2fc3b3e67d344bd4ebd', '0', 'wly19960911@qq.com', null, '2017-04-30 22:02:54');
INSERT INTO `studentUser` VALUES ('71', '13888888887', '123456', 'student', 'ewqewqeq', 'wqeqwewqe', 'qwewqewq', 'eqwewqe', '34f1368228bf3d594ca05f131feab2f8', '1', 'WLY19960911@QQ.com', null, '2017-05-01 13:39:51');
INSERT INTO `studentUser` VALUES ('72', '13888888886', '111111', 'student', null, null, null, null, 'fa1b50653ebc882d19d9b9756a99dc94', '1', 'wly19960911@qq.com', null, '2017-05-01 15:14:22');
INSERT INTO `studentUser` VALUES ('73', '15727646477', '123654', 'student', null, null, null, null, '8fcc2395d51645f65bfb9889ad28c367', '1', '1942943680@qq.com', null, '2017-05-01 23:14:02');
INSERT INTO `studentUser` VALUES ('74', '17688985236', '123123', 'student', null, null, null, null, '117bbbe40685a24e595e0fea7d04b99c', '1', '1090336400@qq.com', null, '2017-05-02 08:48:30');
INSERT INTO `studentUser` VALUES ('75', '13022225555', '123456', 'student', null, null, null, null, '9c5dcadffc67140cbda25e2492e5d9a6', '0', '1090336400@qq.com', null, '2017-05-02 08:53:16');
INSERT INTO `studentUser` VALUES ('76', '15233333333', '123456', 'student', null, null, null, null, 'fb52aec5b695a00ba29e84aef2ac9a72', '0', '1942943680@qq.com', null, '2017-05-02 08:53:55');

-- ----------------------------
-- Table structure for `teacherUser`
-- ----------------------------
DROP TABLE IF EXISTS `teacherUser`;
CREATE TABLE `teacherUser` (
  `teacherId` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `password` varchar(255) NOT NULL,
  `type` varchar(255) NOT NULL,
  `teacherRealName` varchar(255) DEFAULT NULL,
  `school` varchar(255) DEFAULT NULL,
  `college` varchar(255) DEFAULT NULL,
  `token` varchar(255) NOT NULL,
  `status` int(11) NOT NULL,
  `mail` varchar(255) NOT NULL,
  `mainMajor` varchar(255) DEFAULT NULL,
  `electiveMajor` varchar(255) DEFAULT NULL,
  `teacherNumber` varchar(255) DEFAULT NULL,
  `registerTime` datetime DEFAULT NULL,
  PRIMARY KEY (`teacherId`)
) ENGINE=InnoDB AUTO_INCREMENT=79 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of teacherUser
-- ----------------------------
INSERT INTO `teacherUser` VALUES ('1', '13047907760', '123456', 'teacher', '小诺诺', '南工', '信息工程学院', '', '1', '1090336400@qq.com', '计科', '软件工程', '2014102202', null);
INSERT INTO `teacherUser` VALUES ('22', '2563', 'jkoksad', 'teacher', null, null, null, '5fb44cfc11a828c5068918495faa09ec', '0', '1942943680', null, null, null, '2017-04-20 20:42:25');
INSERT INTO `teacherUser` VALUES ('23', 'nsdfnd', 'jsdfj', 'teacher', null, null, null, 'b52c0714a2fb9e845985660083601f3c', '0', '1942943680', null, null, null, '2017-04-20 21:04:54');
INSERT INTO `teacherUser` VALUES ('24', 'ads', 'asdf', 'teacher', null, null, null, 'bb9935dcab997882af23e3820ea2ba4c', '0', '1942943680', null, null, null, '2017-04-20 21:32:13');
INSERT INTO `teacherUser` VALUES ('25', 'adsds', 'asdf', 'teacher', null, null, null, '3dac8db033ff0ae51cdcdb4190b28584', '0', '1942943680', null, null, null, '2017-04-20 21:34:00');
INSERT INTO `teacherUser` VALUES ('26', 'sade', 'asd', 'teacher', null, null, null, '2c98c97c2adb75925d96c1ed32a9ba79', '0', '1942943680', null, null, null, '2017-04-20 21:35:30');
INSERT INTO `teacherUser` VALUES ('27', 'dsafasd', 'afd', 'teacher', null, null, null, '818857f573265beae189664ad0977c41', '0', '1942943680', null, null, null, '2017-04-20 21:42:45');
INSERT INTO `teacherUser` VALUES ('28', 'sdfdsafdas', 'dasfdsa', 'teacher', null, null, null, 'feab9a966319d56a1bbf2d81854daa92', '0', '1942943680', null, null, null, '2017-04-20 21:49:17');
INSERT INTO `teacherUser` VALUES ('29', 'sdafsda', 'sadf', 'teacher', null, null, null, '8a64e78e4dc7be9faa73e1f9c467225d', '0', '1942943680', null, null, null, '2017-04-20 21:51:26');
INSERT INTO `teacherUser` VALUES ('30', 'asfdsafa', 'dsaf', 'teacher', null, null, null, '694a15f447942a91650da7d1c7972f65', '0', '1942943680', null, null, null, '2017-04-20 21:55:30');
INSERT INTO `teacherUser` VALUES ('31', 'sdafsdgbds', '12654sa', 'teacher', null, null, null, '64c989f23ee414c217089ed9ed658d79', '0', '1942943680', null, null, null, '2017-04-20 21:59:38');
INSERT INTO `teacherUser` VALUES ('33', '12121', '123', 'teacher', null, null, null, 'bf4c6e154592cc25d5c468818bdfe89b', '0', '1090336400', null, null, null, '2017-04-21 12:20:30');
INSERT INTO `teacherUser` VALUES ('34', '1212', '123', 'teacher', null, null, null, '738dcda4f94e14f7987518a1f667a116', '0', '1090336400', null, null, null, '2017-04-21 12:26:21');
INSERT INTO `teacherUser` VALUES ('35', '1212', '123', 'teacher', null, null, null, '738dcda4f94e14f7987518a1f667a116', '0', '1090336400', null, null, null, '2017-04-21 12:26:21');
INSERT INTO `teacherUser` VALUES ('36', '122', '123', 'teacher', null, null, null, 'ab5adb174a2b4f020b1bf8fa5b92f3fb', '1', '1090336400', null, null, null, '2017-04-21 12:32:19');
INSERT INTO `teacherUser` VALUES ('37', 'SDAFASD', 'asdf', 'teacher', null, null, null, 'd15217a371ff51418591ccd01bb310c1', '0', '1942943680', null, null, null, '2017-04-21 12:37:03');
INSERT INTO `teacherUser` VALUES ('38', 'SDAFAS', 'asdf', 'teacher', null, null, null, '5096e493a6226889742582e13c656c52', '1', '1942943680', null, null, null, '2017-04-21 12:39:13');
INSERT INTO `teacherUser` VALUES ('39', '1', '123456', 'teacher', '曲艺', '南昌工程学院', '信息工程学院', '80bef854b2dba51409b5c37c577a8492', '1', '1090336400', null, '', '2011102521', '2017-04-21 13:54:53');
INSERT INTO `teacherUser` VALUES ('40', '112233', '123', 'teacher', null, null, null, 'b6d69d58c159edf188555f8df3f8a66f', '1', '1090336400', null, null, null, '2017-04-21 18:47:25');
INSERT INTO `teacherUser` VALUES ('41', 'ds', '123123', 'teacher', null, null, null, '8f20ac523ebd40a5c9c095232fd2fee2', '0', '1090336400', null, null, null, '2017-04-21 19:20:05');
INSERT INTO `teacherUser` VALUES ('42', '144', '123123', 'teacher', null, null, null, '157d7eeb63d1b4979887e77250fa7fc7', '0', '1090336400', null, null, null, '2017-04-21 19:23:19');
INSERT INTO `teacherUser` VALUES ('43', 'qaz', '112', 'teacher', null, null, null, '7a6f09de461635fb42657a79e0416626', '0', '1090336400', null, null, null, '2017-04-21 19:39:20');
INSERT INTO `teacherUser` VALUES ('44', 'qa2', '112', 'teacher', null, null, null, '49baa3307bef179ca74707bfe896adda', '0', '1090336400', null, null, null, '2017-04-21 19:51:33');
INSERT INTO `teacherUser` VALUES ('45', 'qa222', '112', 'teacher', null, null, null, '303713b233dea4a6d6ab4517071d9a80', '0', '1090336400', null, null, null, '2017-04-21 19:52:59');
INSERT INTO `teacherUser` VALUES ('46', 'vb', '123', 'teacher', null, null, null, 'd41f28ab8321622031df2be9e5fcbfd4', '0', '1090336400', null, null, null, '2017-04-21 19:53:28');
INSERT INTO `teacherUser` VALUES ('47', 'sdfsf', '1231', 'teacher', null, null, null, 'cae0a34f11b6aa30b7140ea507b0c59d', '0', '1090336400', null, null, null, '2017-04-21 20:25:12');
INSERT INTO `teacherUser` VALUES ('48', 'sdfsf53454525', '1231', 'teacher', null, null, null, 'fa24852cc4da52474d02a6fd8c0226c4', '0', '1090336400', null, null, null, '2017-04-21 20:29:04');
INSERT INTO `teacherUser` VALUES ('49', '121212121wqw', '12', 'teacher', null, null, null, 'eaf78a2719fce05ba64dac2951559bfa', '0', '1090336400', null, null, null, '2017-04-22 11:12:44');
INSERT INTO `teacherUser` VALUES ('50', 'fsdaf', 'sdaf', 'teacher', null, null, null, 'ca26df4f37f2b68779fc7e3f137067ba', '0', '1942943680', null, null, null, '2017-04-22 14:01:19');
INSERT INTO `teacherUser` VALUES ('51', 'asfsdafds', 'asdfas', 'teacher', null, null, null, '9e00c5058a78ee3349047fcfe54370f2', '0', '1942943680', null, null, null, '2017-04-22 14:02:17');
INSERT INTO `teacherUser` VALUES ('52', 'sadfhasdhfdiuj', 'asd', 'teacher', null, null, null, 'd3980d3fdf7390b5cf1b179ed0f3a80e', '1', '1942943680', null, null, null, '2017-04-22 14:53:47');
INSERT INTO `teacherUser` VALUES ('53', 'sadfdsd', 'asd', 'teacher', null, null, null, 'e4a1fe13eb6da2891ddd8cc38d73e656', '0', '1942943680', null, null, null, '2017-04-22 15:35:21');
INSERT INTO `teacherUser` VALUES ('54', 'sadfsad', 'sdf', 'teacher', null, null, null, 'be0d17a63b73306edbdd69afe0c711e2', '0', '1942943680', null, null, null, '2017-04-22 15:45:37');
INSERT INTO `teacherUser` VALUES ('55', 'asfdhfjkdsao', 'sd', 'teacher', null, null, null, 'a5e202a5575cb1085c226470bd86af18', '0', '1942943680', null, null, null, '2017-04-22 15:56:14');
INSERT INTO `teacherUser` VALUES ('56', '12212', '111', 'teacher', null, null, null, 'e0df24799ee1d7c2bba12fec2e70a61a', '0', '1090336400', null, null, null, '2017-04-22 22:25:23');
INSERT INTO `teacherUser` VALUES ('57', 'sdafds', 'dsafds', 'teacher', null, null, null, 'a4d213b6a1340a902a8084b005a59583', '0', '1942943680@qq.com', null, null, null, '2017-04-27 21:12:57');
INSERT INTO `teacherUser` VALUES ('58', 'asdfasd', 'asd', 'teacher', null, null, null, '8f69d6aae16078588fee866dd3fdc1fc', '0', '1942943680@qq,com', null, null, null, '2017-04-27 21:16:23');
INSERT INTO `teacherUser` VALUES ('60', '18507910051', '123456', 'teacher', null, null, null, '86093fd52e091c41a0fdc989df89d4e7', '1', '1942943680@qq.com', null, null, null, '2017-04-28 10:28:12');
INSERT INTO `teacherUser` VALUES ('61', '18507668477', '123456', 'teacher', null, null, null, 'b24dc669a6555fe8c08ffd98ea32aca7', '0', '1942943680@qq.com', null, null, null, '2017-04-28 20:06:34');
INSERT INTO `teacherUser` VALUES ('62', '13047907733', '123456', 'teacher', null, null, null, '08d2c18075cd9e3c55dee16db3c448f9', '1', '1090336400@qq.com', null, null, null, '2017-04-29 15:42:32');
INSERT INTO `teacherUser` VALUES ('63', '13047907755', '123456', 'teacher', null, null, null, '352686e6dab6b0adbfff5c4c9bc364af', '1', '1090336400@qq.com', null, null, null, '2017-04-29 15:45:28');
INSERT INTO `teacherUser` VALUES ('64', '13047907711', '123456', 'teacher', null, null, null, '50d6cd9d96d11b78762072980e6f2d41', '0', '1090336400@qq.com', null, null, null, '2017-04-29 17:29:23');
INSERT INTO `teacherUser` VALUES ('65', '13047907715', '123456', 'teacher', null, null, null, '42ae67b507f044d818e54383269fe412', '0', '1090336400@qq.com', null, null, null, '2017-04-29 22:39:33');
INSERT INTO `teacherUser` VALUES ('66', '13047902266', '123456', 'teacher', null, null, null, '7cec4a249139d251b371e8d354e76e24', '0', '1090336400@qq.com', null, null, null, '2017-04-29 22:40:33');
INSERT INTO `teacherUser` VALUES ('67', '17688986520', '123456', 'teacher', null, null, null, '9e862afb5f313d38bbee91d642f261a1', '1', '1090336400@qq.com', null, null, null, '2017-04-30 16:03:09');
INSERT INTO `teacherUser` VALUES ('68', '13047907744', '123456', 'teacher', null, null, null, '1f97eb6665126b74b46e4b0e57d66d68', '1', '1090336400@qq.com', null, null, null, '2017-04-30 19:17:02');
INSERT INTO `teacherUser` VALUES ('69', '13047555555', '123456', 'teacher', null, null, null, '1d64750b9461fcda31324f6999d4a01f', '0', '1090336400@qq.com', null, null, null, '2017-04-30 21:46:54');
INSERT INTO `teacherUser` VALUES ('70', '13047552233', '123123', 'teacher', null, null, null, '0f86b7e9ab4a7e9a507de1ea4d46b028', '1', '1090336400@qq.com', null, null, null, '2017-05-01 13:59:30');
INSERT INTO `teacherUser` VALUES ('71', '13045632222', '1111111', 'teacher', null, null, null, '6bd45f836a2de7a8d7ef58d3ed99272e', '0', '109033640@qq.com', null, null, null, '2017-05-01 14:03:42');
INSERT INTO `teacherUser` VALUES ('72', '13045662233', '123456', 'teacher', null, null, null, '72e20a2622dfdd373a8b026b0bfa4471', '0', '1090336400@qq.com', null, null, null, '2017-05-01 14:04:14');
INSERT INTO `teacherUser` VALUES ('73', '13047222222', '123456', 'teacher', null, null, null, 'b8faff30c532a614f8a46036cf4aa0b3', '1', '1090336400@qq.com', null, null, null, '2017-05-01 14:23:06');
INSERT INTO `teacherUser` VALUES ('74', '13047901122', '123456', 'teacher', null, null, null, '6d66ff36d8f07d26083e6a10b6c4a2ab', '1', '1090336400@qq.com', null, null, null, '2017-05-01 20:38:26');
INSERT INTO `teacherUser` VALUES ('75', '13047907762', '123456', 'teacher', null, null, null, '0a73a73d7489a6e5516824094d409bc7', '0', '1090336400@qq.com', null, null, null, '2017-05-01 20:49:18');
INSERT INTO `teacherUser` VALUES ('76', '13047556633', '123456', 'teacher', null, null, null, 'ae8bbf94d0054309400bcfb1e8a453d7', '0', '1090336400@qq.com', null, null, null, '2017-05-01 20:52:13');
INSERT INTO `teacherUser` VALUES ('77', '13058659956', '123456', 'teacher', null, null, null, '42c726eb58b7ec0c5ed8924321922eb4', '1', '1090336400@qq.com', null, null, null, '2017-05-01 20:53:24');
INSERT INTO `teacherUser` VALUES ('78', '13045236895', '123456', 'teacher', null, null, null, '0ea90a0e415e57d67e5958bad506a8ae', '1', '1090336400@qq.com', null, null, null, '2017-05-01 20:55:58');

-- ----------------------------
-- Table structure for `user`
-- ----------------------------
DROP TABLE IF EXISTS `user`;
CREATE TABLE `user` (
  `id` int(11) NOT NULL,
  `name` varchar(255) DEFAULT NULL,
  `password` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of user
-- ----------------------------
INSERT INTO `user` VALUES ('1', '11', '111');

-- ----------------------------
-- Table structure for `user_t`
-- ----------------------------
DROP TABLE IF EXISTS `user_t`;
CREATE TABLE `user_t` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_name` varchar(255) DEFAULT NULL,
  `password` varchar(255) DEFAULT NULL,
  `age` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of user_t
-- ----------------------------
INSERT INTO `user_t` VALUES ('1', '111', '111', '121');
INSERT INTO `user_t` VALUES ('2', '12121', '212121', '21212');

-- ----------------------------
-- Table structure for `userEvenLog`
-- ----------------------------
DROP TABLE IF EXISTS `userEvenLog`;
CREATE TABLE `userEvenLog` (
  `eventId` varchar(50) NOT NULL,
  `activityId` int(11) NOT NULL,
  `userId` int(11) NOT NULL,
  `answerResults` varchar(500) DEFAULT NULL,
  `startTime` datetime DEFAULT NULL,
  `endTime` datetime DEFAULT NULL,
  `rightTimes` int(11) DEFAULT NULL,
  `errorTimes` int(11) DEFAULT NULL,
  `accuracy` varchar(255) DEFAULT NULL,
  `eduEvaluate` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`eventId`),
  KEY `activityId` (`activityId`),
  KEY `studentId` (`userId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of userEvenLog
-- ----------------------------
INSERT INTO `userEvenLog` VALUES ('09298bd6-0bb7-4195-b150-30337b0d8e3a', '22', '0', '[{\"qbld\":1200000001,\"isRight\":0},{\"qbld\":1200000002,\"isRight\":3},{\"qbld\":1200000003,\"isRight\":3},{\"qbld\":1200000004,\"isRight\":3},{\"qbld\":1200000005,\"isRight\":null}]', '2017-05-01 12:45:46', '2017-05-01 12:45:46', '1', '1', '50%', '[ {\"activityId\": \"0\",\"studentId\": \"1\", \"hard\": \"\", \"rate\": \"4\",\"advice\": \"还撒旦撒地方飒飒大红包飞回家的数据阿富汗四大金刚行\", \"starts\": \"5\" }]');
INSERT INTO `userEvenLog` VALUES ('1016c988-7715-4a9f-91fe-ae476028fb44', '22', '55', '[{\"qbId\":1200000001,\"isRight\":1},{\"qbId\":1200000002,\"isRight\":1}]', '2017-05-01 13:08:12', '2017-05-01 13:08:12', '1', '1', '50%', '[ {\"activityId\": \"0\",\"studentId\": \"1\", \"hard\": \"\", \"rate\": \"4\",\"advice\": \"还撒旦撒地方飒飒大红包飞回家的数据阿富汗四大金刚行\", \"starts\": \"5\" }]');
INSERT INTO `userEvenLog` VALUES ('1083200b-25f8-4e20-8dae-3d179fc44f25', '25', '1', '[{\"pdId\" : 1100000001, \"isRight\" : 1},{ \"pdId\": 1100000002, \"isRight\": 1} ]', '2017-04-25 00:00:00', '2017-04-25 00:00:00', '1', '3', '10%', '[ {\"activityId\": \"0\",\"studentId\": \"1\", \"hard\": \"\", \"rate\": \"4\",\"advice\": \"还撒旦撒地方飒飒大红包飞回家的数据阿富汗四大金刚行\", \"starts\": \"5\" }]');
INSERT INTO `userEvenLog` VALUES ('15', '22', '5', '415454', '2017-04-25 00:00:00', '2017-04-25 00:00:00', '1', '2', '50%', '[ {\"activityId\": \"0\",\"studentId\": \"1\", \"hard\": \"\", \"rate\": \"4\",\"advice\": \"还撒旦撒地方飒飒大红包飞回家的数据阿富汗四大金刚行\", \"starts\": \"5\" }]');
INSERT INTO `userEvenLog` VALUES ('19160ad2-00db-4605-a882-7decc2394bdf', '25', '1', '[{\"qbId\" : 1100000001, \"isRight\" : 1},{ \"qbId\": 1100000002, \"isRight\": 0} ]', '2017-04-25 00:00:00', '2017-04-25 00:00:00', '1', '2', '10%', '[ {\"activityId\": \"0\",\"studentId\": \"1\", \"hard\": \"\", \"rate\": \"4\",\"advice\": \"还撒旦撒地方飒飒大红包飞回家的数据阿富汗四大金刚行\", \"starts\": \"5\" }]');
INSERT INTO `userEvenLog` VALUES ('1b048410-dd2c-4c19-8b25-3d67a33fae95', '0', '6', '[{\"qbId\":1200000001,\"isRight\":2},{\"qbId\":1200000002,\"isRight\":2},{\"qbId\":1200000003,\"isRight\":2},{\"qbId\":1200000004,\"isRight\":0},{\"qbId\":1200000005,\"isRight\":3},{\"qbId\":1200000006,\"isRight\":1},{\"qbId\":1200000007,\"isRight\":3},{\"qbId\":1200000011,\"isRight\":1},{\"qbId\":1200000012,\"isRight\":1},{\"qbId\":1200000013,\"isRight\":3}]', '2017-04-25 08:00:00', '2017-04-25 08:00:00', '0', '1', '10%', null);
INSERT INTO `userEvenLog` VALUES ('251215', '5676951', '55', '{activityId:5676951,userId:5,answerResults:[{qbld:1200000001,isRight:0},{qbld:1200000002,isRight:1}]}', null, null, '0', '0', null, '[ {\"activityId\": \"0\",\"studentId\": \"1\", \"hard\": \"\", \"rate\": \"4\",\"advice\": \"还撒旦撒地方飒飒大红包飞回家的数据阿富汗四大金刚行\", \"starts\": \"5\" }]');
INSERT INTO `userEvenLog` VALUES ('25343435', '22', '55', '成功啦', '2017-05-01 12:45:44', '2017-05-01 12:45:44', '1', '1', '50%', '[ {\"activityId\": \"0\",\"studentId\": \"1\", \"hard\": \"\", \"rate\": \"4\",\"advice\": \"还撒旦撒地方飒飒大红包飞回家的数据阿富汗四大金刚行\", \"starts\": \"5\" }]');
INSERT INTO `userEvenLog` VALUES ('255', '22', '55', '成功啦', '2017-05-01 12:11:43', '2017-05-01 12:11:43', '1', '1', '50%', '[ {\"activityId\": \"0\",\"studentId\": \"1\", \"hard\": \"\", \"rate\": \"4\",\"advice\": \"还撒旦撒地方飒飒大红包飞回家的数据阿富汗四大金刚行\", \"starts\": \"5\" }]');
INSERT INTO `userEvenLog` VALUES ('2f85700a-3fc8-4cf2-afb7-306caa7a7feb', '22', '55', '[{\"qbId\":1200000001,\"isRight\":1},{\"qbId\":1200000002,\"isRight\":1}]', '2017-05-01 13:05:43', '2017-05-01 13:05:43', '1', '1', '50%', '[ {\"activityId\": \"0\",\"studentId\": \"1\", \"hard\": \"\", \"rate\": \"4\",\"advice\": \"还撒旦撒地方飒飒大红包飞回家的数据阿富汗四大金刚行\", \"starts\": \"5\" }]');
INSERT INTO `userEvenLog` VALUES ('3618c5c6-3e1e-41c0-90d7-9655b32a7c36', '5676951', '5', '[{\"qbId\":1200000001,\"isRight\":0},{\"qbId\":1200000002,\"isRight\":0}]', '2017-04-25 08:00:00', '2017-04-25 08:00:00', '1', '1', '10%', '[ {\"activityId\": \"0\",\"studentId\": \"1\", \"hard\": \"\", \"rate\": \"4\",\"advice\": \"还撒旦撒地方飒飒大红包飞回家的数据阿富汗四大金刚行\", \"starts\": \"5\" }]');
INSERT INTO `userEvenLog` VALUES ('3894bfc2-64f2-4214-b7d4-bdeb0338b5e6', '22', '55', '[{\"qbId\":1200000001,\"isRight\":0},{\"qbId\":1200000002,\"isRight\":3},{\"qbId\":1200000003,\"isRight\":3},{\"qbId\":1200000004,\"isRight\":3},{\"qbId\":1200000005,\"isRight\":null}]', '2017-05-01 12:52:34', '2017-05-01 12:52:34', '1', '1', '50%', '[ {\"activityId\": \"0\",\"studentId\": \"1\", \"hard\": \"\", \"rate\": \"4\",\"advice\": \"还撒旦撒地方飒飒大红包飞回家的数据阿富汗四大金刚行\", \"starts\": \"5\" }]');
INSERT INTO `userEvenLog` VALUES ('405af784-3d8c-43ce-88c9-ac0b40398a76', '22', '55', '[{\"qbId\":1200000001,\"isRight\":1},{\"qbId\":1200000002,\"isRight\":1}]', '2017-05-01 13:14:15', '2017-05-01 13:14:15', '1', '1', '50%', '[ {\"activityId\": \"0\",\"studentId\": \"1\", \"hard\": \"\", \"rate\": \"4\",\"advice\": \"还撒旦撒地方飒飒大红包飞回家的数据阿富汗四大金刚行\", \"starts\": \"5\" }]');
INSERT INTO `userEvenLog` VALUES ('40be283c-dd4f-40d1-95fd-8718f03c498c', '22', '55', '[{\"qbId\":1200000001,\"isRight\":0},{\"qbId\":1200000002,\"isRight\":0}]', '2017-05-01 13:01:34', '2017-05-01 13:01:34', '1', '1', '50%', '[ {\"activityId\": \"0\",\"studentId\": \"1\", \"hard\": \"\", \"rate\": \"4\",\"advice\": \"还撒旦撒地方飒飒大红包飞回家的数据阿富汗四大金刚行\", \"starts\": \"5\" }]');
INSERT INTO `userEvenLog` VALUES ('4aad06a2-4c75-4f82-bba3-bca72898170e', '25', '2', '[{\"pdId\" : 1100000001, \"isRight\" : 1},{ \"pdId\": 1100000002, \"isRight\": 1} ]', '2017-04-25 00:00:00', '2017-04-25 00:00:00', '1', '9', '10%', '[ {\"activityId\": \"0\",\"studentId\": \"1\", \"hard\": \"\", \"rate\": \"4\",\"advice\": \"还撒旦撒地方飒飒大红包飞回家的数据阿富汗四大金刚行\", \"starts\": \"5\" }]');
INSERT INTO `userEvenLog` VALUES ('4e4dbd40-fd51-4e1b-8d92-587600158ee6', '25', '2', '[{\"pdId\" : 1100000001, \"isRight\" : 1},{ \"pdId\": 1100000002, \"isRight\": 1} ]', '2017-04-25 00:00:00', '2017-04-25 00:00:00', '1', '9', '10%', '[ {\"activityId\": \"0\",\"studentId\": \"1\", \"hard\": \"3\", \"rate\": \"4\",\"advice\": \"还行\", \"starts\": \"5\" }]');
INSERT INTO `userEvenLog` VALUES ('504fa892-e5ab-4f0e-a6c8-ac32c77ab711', '22', '55', '[{\"qbId\":1200000001,\"isRight\":1},{\"qbId\":1200000002,\"isRight\":1}]', '2017-05-01 13:06:17', '2017-05-01 13:06:17', '1', '1', '50%', '[ {\"activityId\": \"0\",\"studentId\": \"1\", \"hard\": \"\", \"rate\": \"4\",\"advice\": \"还撒旦撒地方飒飒大红包飞回家的数据阿富汗四大金刚行\", \"starts\": \"5\" }]');
INSERT INTO `userEvenLog` VALUES ('505bcc6b-272c-4e39-a073-3263ff96fc63', '22', '55', '[{\"qbId\":1200000001,\"isRight\":0},{\"qbId\":1200000002,\"isRight\":0}]', '2017-05-01 13:03:54', '2017-05-01 13:03:54', '1', '1', '50%', '[ {\"activityId\": \"0\",\"studentId\": \"1\", \"hard\": \"\", \"rate\": \"4\",\"advice\": \"还撒旦撒地方飒飒大红包飞回家的数据阿富汗四大金刚行\", \"starts\": \"5\" }]');
INSERT INTO `userEvenLog` VALUES ('523b8a03-6338-4994-bfe3-89f7155ce16d', '5676951', '5', '[{\"qbId\":1200000001,\"isRight\":0},{\"qbId\":1200000002,\"isRight\":0}]', '2017-04-25 08:00:00', '2017-04-25 08:00:00', '1', '1', null, '[ {\"activityId\": \"0\",\"studentId\": \"1\", \"hard\": \"\", \"rate\": \"4\",\"advice\": \"还撒旦撒地方飒飒大红包飞回家的数据阿富汗四大金刚行\", \"starts\": \"5\" }]');
INSERT INTO `userEvenLog` VALUES ('543839d8-bad7-4915-91c6-22d94a2d452a', '25', '2', '[{\"pdId\" : 1100000001, \"isRight\" : 1},{ \"pdId\": 1100000002, \"isRight\": 1} ]', '2017-04-25 00:00:00', '2017-04-25 00:00:00', '1', '9', '10%', '[ {\"activityId\": \"0\",\"studentId\": \"1\", \"hard\": \"3\", \"rate\": \"4\",\"advice\": \"还行\", \"starts\": \"5\" }]');
INSERT INTO `userEvenLog` VALUES ('54733cab-5515-45e7-9054-fb6602f472a0', '25', '2', '[{\"pbId\" : 1100000001, \"isRight\" : 1},{ \"pbId\": 1100000002, \"isRight\": 1} ]', '2017-04-25 00:00:00', '2017-04-25 00:00:00', '1', '9', '10%', '[ {\"activityId\": \"0\",\"studentId\": \"1\", \"hard\": \"3\", \"rate\": \"4\",\"advice\": \"还行\", \"starts\": \"5\" }]');
INSERT INTO `userEvenLog` VALUES ('5557c9c7-04e9-4efb-a93f-97cec2fe06e8', '22', '55', '[{\"qbId\":1200000001,\"isRight\":0},{\"qbId\":1200000002,\"isRight\":0}]', '2017-05-01 13:02:26', '2017-05-01 13:02:26', '1', '1', '50%', '[ {\"activityId\": \"0\",\"studentId\": \"1\", \"hard\": \"\", \"rate\": \"4\",\"advice\": \"还撒旦撒地方飒飒大红包飞回家的数据阿富汗四大金刚行\", \"starts\": \"5\" }]');
INSERT INTO `userEvenLog` VALUES ('5fe25c1c-8f04-4a2f-9825-46e599648ff6', '25', '55', '[{\"qbId\":1200000001,\"isRight\":0},{\"qbId\":1200000002,\"isRight\":0}]', '2017-05-01 12:54:20', '2017-05-01 12:54:20', '1', '1', '50%', '[ {\"activityId\": \"0\",\"studentId\": \"1\", \"hard\": \"\", \"rate\": \"4\",\"advice\": \"还撒旦撒地方飒飒大红包飞回家的数据阿富汗四大金刚行\", \"starts\": \"5\" }]');
INSERT INTO `userEvenLog` VALUES ('7013ae6c-d923-48fa-9ab8-7e5a59d40be0', '22', '55', '[{\"qbld\":1200000001,\"isRight\":0},{\"qbld\":1200000002,\"isRight\":3},{\"qbld\":1200000003,\"isRight\":3},{\"qbld\":1200000004,\"isRight\":3},{\"qbld\":1200000005,\"isRight\":null}]', '2017-05-01 12:42:57', '2017-05-01 12:42:57', '1', '1', '50%', '[ {\"activityId\": \"0\",\"studentId\": \"1\", \"hard\": \"\", \"rate\": \"4\",\"advice\": \"还撒旦撒地方飒飒大红包飞回家的数据阿富汗四大金刚行\", \"starts\": \"5\" }]');
INSERT INTO `userEvenLog` VALUES ('74b64cb1-2478-43b0-9434-27af755a9eb3', '25', '5', '', '2017-04-25 08:00:00', '2017-04-25 08:00:00', '1', '1', '10%', '[ {\"activityId\": \"0\",\"studentId\": \"1\", \"hard\": \"\", \"rate\": \"4\",\"advice\": \"还撒旦撒地方飒飒大红包飞回家的数据阿富汗四大金刚行\", \"starts\": \"5\" }]');
INSERT INTO `userEvenLog` VALUES ('7b4b6964-7cf5-45c5-871e-8cd286da4e75', '5676951', '5', '[{\"qbId\":1200000001,\"isRight\":0},{\"qbId\":1200000002,\"isRight\":null}]', '2017-04-25 08:00:00', '2017-04-25 08:00:00', '1', '1', '10%', '[ {\"activityId\": \"0\",\"studentId\": \"1\", \"hard\": \"\", \"rate\": \"4\",\"advice\": \"还撒旦撒地方飒飒大红包飞回家的数据阿富汗四大金刚行\", \"starts\": \"5\" }]');
INSERT INTO `userEvenLog` VALUES ('7b97cec6-fca2-4abb-a66e-2503050966ed', '573526', '6', '[{\"qbId\":1200000001,\"isRight\":3},{\"qbId\":1200000002,\"isRight\":3},{\"qbId\":1200000003,\"isRight\":1},{\"qbId\":1200000004,\"isRight\":3},{\"qbId\":1200000005,\"isRight\":2},{\"qbId\":1200000006,\"isRight\":1},{\"qbId\":1200000007,\"isRight\":3},{\"qbId\":1200000011,\"isRight\":2},{\"qbId\":1200000012,\"isRight\":3},{\"qbId\":1200000013,\"isRight\":3}]', '2017-04-25 08:00:00', '2017-04-25 08:00:00', '0', '1', '10%', '{\"advise\":\"eqweqweqw\",\"hard\":4,\"rate\":4,\"stars\":4}');
INSERT INTO `userEvenLog` VALUES ('7d1fead0-6b4f-42e6-9360-0c0c65640ca3', '25', '55', '[{\"qbId\":1200000001,\"isRight\":0},{\"qbId\":1200000002,\"isRight\":0}]', '2017-05-01 12:55:21', '2017-05-01 12:55:21', '1', '1', '50%', '[ {\"activityId\": \"0\",\"studentId\": \"1\", \"hard\": \"\", \"rate\": \"4\",\"advice\": \"还撒旦撒地方飒飒大红包飞回家的数据阿富汗四大金刚行\", \"starts\": \"5\" }]');
INSERT INTO `userEvenLog` VALUES ('841065b4-cb1f-4d3d-bcf0-9c67a6c491ff', '5676951', '5', '[{\"qbId\":1200000001,\"isRight\":0},{\"qbId\":1200000002,\"isRight\":null}]', '2017-04-25 08:00:00', '2017-04-25 08:00:00', '1', '1', '10%', '[ {\"activityId\": \"0\",\"studentId\": \"1\", \"hard\": \"\", \"rate\": \"4\",\"advice\": \"还撒旦撒地方飒飒大红包飞回家的数据阿富汗四大金刚行\", \"starts\": \"5\" }]');
INSERT INTO `userEvenLog` VALUES ('8c4b3a39-61bc-4b89-8294-e8e9241294f7', '25', '2', '{\"pdId\" : 1100000001, \"isRight\" : 1},{ \"pdId\": 1100000002, \"isRight\": 1} ', '2017-04-25 00:00:00', '2017-04-25 00:00:00', '1', '9', '10%', '[ {\"activityId\": \"0\",\"studentId\": \"1\", \"hard\": \"\", \"rate\": \"4\",\"advice\": \"还撒旦撒地方飒飒大红包飞回家的数据阿富汗四大金刚行\", \"starts\": \"5\" }]');
INSERT INTO `userEvenLog` VALUES ('9f775d46-540b-48a1-beaa-0606c09d046e', '5675863', '2', '[{\"qbId\":1200000001,\"isRight\":0},{\"qbId\":1200000002,\"isRight\":0},{\"qbId\":1200000003,\"isRight\":0},{\"qbId\":1200000004,\"isRight\":0},{\"qbId\":1200000005,\"isRight\":0},{\"qbId\":1200000006,\"isRight\":0},{\"qbId\":1200000007,\"isRight\":0},{\"qbId\":1200000011,\"isRight\":0},{\"qbId\":1200000012,\"isRight\":0},{\"qbId\":1200000013,\"isRight\":0}]', '2017-04-25 08:00:00', '2017-04-25 08:00:00', '0', '1', '10%', '{\"advise\":\"jnbbcxxhbxf\",\"hard\":2,\"rate\":3,\"stars\":4}');
INSERT INTO `userEvenLog` VALUES ('a716d8ba-f9b4-49c4-b2b8-b992a2b31df7', '22', '55', '[{\"qbId\":1200000001,\"isRight\":0},{\"qbId\":1200000002,\"isRight\":0}]', '2017-05-01 12:53:24', '2017-05-01 12:53:24', '1', '1', '50%', '[ {\"activityId\": \"0\",\"studentId\": \"1\", \"hard\": \"\", \"rate\": \"4\",\"advice\": \"还撒旦撒地方飒飒大红包飞回家的数据阿富汗四大金刚行\", \"starts\": \"5\" }]');
INSERT INTO `userEvenLog` VALUES ('b239d766-3689-421b-ad56-70ce8807d005', '103117', '5', '[{\"qbId\":1200000001,\"isRight\":0},{\"qbId\":1200000002,\"isRight\":0}]', '2017-04-25 08:00:00', '2017-04-25 08:00:00', '1', '1', '10%', '[ {\"activityId\": \"0\",\"studentId\": \"1\", \"hard\": \"\", \"rate\": \"4\",\"advice\": \"还撒旦撒地方飒飒大红包飞回家的数据阿富汗四大金刚行\", \"starts\": \"5\" }]');
INSERT INTO `userEvenLog` VALUES ('b57fc148-9550-4951-84f4-4c8a0dec7486', '5676951', '5', '[{\"qbld\":1200000001,\"isRight\":null},{\"qbld\":1200000002,\"isRight\":null}]', '2017-04-25 08:00:00', '2017-04-25 08:00:00', '1', '1', '10%', '[ {\"activityId\": \"0\",\"studentId\": \"1\", \"hard\": \"\", \"rate\": \"4\",\"advice\": \"还撒旦撒地方飒飒大红包飞回家的数据阿富汗四大金刚行\", \"starts\": \"5\" }]');
INSERT INTO `userEvenLog` VALUES ('b6e31351-9f34-4e4b-a730-7b4e2287165a', '5676951', '5', '[{\"qbld\":1200000001,\"isRight\":0},{\"qbld\":1200000002,\"isRight\":3},{\"qbld\":1200000003,\"isRight\":3},{\"qbld\":1200000004,\"isRight\":3},{\"qbld\":1200000005,\"isRight\":null}]', '2017-04-25 08:00:00', '2017-04-25 08:00:00', '1', '1', '10%', '[ {\"activityId\": \"0\",\"studentId\": \"1\", \"hard\": \"\", \"rate\": \"4\",\"advice\": \"还撒旦撒地方飒飒大红包飞回家的数据阿富汗四大金刚行\", \"starts\": \"5\" }]');
INSERT INTO `userEvenLog` VALUES ('bb97e965-1f74-46d6-a259-ad9b8fee5463', '5676951', '5', '[{\"qbId\":1200000001,\"isRight\":0},{\"qbId\":1200000002,\"isRight\":0}]', '2017-04-25 08:00:00', '2017-04-25 08:00:00', '0', '0', null, '[ {\"activityId\": \"0\",\"studentId\": \"1\", \"hard\": \"\", \"rate\": \"4\",\"advice\": \"还撒旦撒地方飒飒大红包飞回家的数据阿富汗四大金刚行\", \"starts\": \"5\" }]');
INSERT INTO `userEvenLog` VALUES ('c5437ceb-6469-4842-bc3f-2e951526b5b7', '25', '55', '[{\"qbId\":1200000001,\"isRight\":1},{\"qbId\":1200000002,\"isRight\":1}]', '2017-05-01 13:12:16', '2017-05-01 13:12:16', '1', '1', '50%', '[ {\"activityId\": \"0\",\"studentId\": \"1\", \"hard\": \"\", \"rate\": \"4\",\"advice\": \"还撒旦撒地方飒飒大红包飞回家的数据阿富汗四大金刚行\", \"starts\": \"5\" }]');
INSERT INTO `userEvenLog` VALUES ('d2c2077a-2d91-4146-8dbb-40c7b440b754', '25', '2', '[{\"pdId\" : 1100000001, \"isRight\" : 1},{ \"pdId\": 1100000002, \"isRight\": 1} ]', '2017-04-25 00:00:00', '2017-04-25 00:00:00', '1', '9', '10%', '[ {\"activityId\": \"0\",\"studentId\": \"1\", \"hard\": \"3\", \"rate\": \"4\",\"advice\": \"还行\", \"starts\": \"5\" }]');
INSERT INTO `userEvenLog` VALUES ('e04283b8-6dda-4cb6-a492-9a67177d3dbd', '25', '2', '{pbId:1100000001,isRight:1},{pbId:1100000002,isRight:0}', '2017-04-25 00:00:00', '2017-04-25 00:00:00', '1', '9', '10%', '[ {\"activityId\": \"0\",\"studentId\": \"1\", \"hard\": \"3\", \"rate\": \"4\",\"advice\": \"还行\", \"starts\": \"5\" }]');
INSERT INTO `userEvenLog` VALUES ('e2574f9a-fae7-40fb-9a30-875dda42253f', '25', '1', '返回的答案', '2017-04-25 00:00:00', '2017-04-25 00:00:00', '236', '36', '10%', '[ {\"activityId\": \"0\",\"studentId\": \"1\", \"hard\": \"3\", \"rate\": \"4\",\"advice\": \"还行\", \"starts\": \"5\" }]');
INSERT INTO `userEvenLog` VALUES ('e614088a-9583-45b2-8e1d-bb76a72fdac3', '4033700', '38', '[{\"qbId\":1200000001,\"isRight\":0},{\"qbId\":1200000002,\"isRight\":0},{\"qbId\":1200000003,\"isRight\":0},{\"qbId\":1200000004,\"isRight\":0},{\"qbId\":1200000005,\"isRight\":0},{\"qbId\":1200000006,\"isRight\":0},{\"qbId\":1200000007,\"isRight\":0},{\"qbId\":1200000011,\"isRight\":0},{\"qbId\":1200000012,\"isRight\":0},{\"qbId\":1200000013,\"isRight\":0}]', '2017-04-25 08:00:00', '2017-04-25 08:00:00', '0', '1', '10%', '{\"advise\":\"我觉得课程十分精彩\",\"hard\":4,\"rate\":4,\"stars\":4}');
INSERT INTO `userEvenLog` VALUES ('ea137fbb-66ac-47ba-9dc1-809a286cdc5d', '25', '2', '[{\"qbId\" : 1100000001, \"isRight\" : 1},{ \"qbId\": 1100000002, \"isRight\": 0} ]', '2017-04-25 00:00:00', '2017-04-25 00:00:00', '1', '9', '10%', '[ {\"activityId\": \"0\",\"studentId\": \"1\", \"hard\": \"3\", \"rate\": \"4\",\"advice\": \"还行\", \"starts\": \"5\" }]');
INSERT INTO `userEvenLog` VALUES ('f5c5cb8b-bd4f-4f4b-abf9-3296f3b3b2d6', '103117', '72', '[{\"qbId\":1200000001,\"isRight\":0},{\"qbId\":1200000002,\"isRight\":0},{\"qbId\":1200000003,\"isRight\":0},{\"qbId\":1200000004,\"isRight\":0},{\"qbId\":1200000005,\"isRight\":0},{\"qbId\":1200000006,\"isRight\":0},{\"qbId\":1200000007,\"isRight\":0},{\"qbId\":1200000011,\"isRight\":2},{\"qbId\":1200000012,\"isRight\":3},{\"qbId\":1200000013,\"isRight\":3}]', '2017-04-25 08:00:00', '2017-04-25 08:00:00', '0', '1', '10%', '[ {\"activityId\": \"0\",\"studentId\": \"1\", \"hard\": \"3\", \"rate\": \"4\",\"advice\": \"还行\", \"starts\": \"5\" }]');

-- ----------------------------
-- View structure for `viewUser`
-- ----------------------------
DROP VIEW IF EXISTS `viewUser`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `viewUser` AS (select `studentUser`.`name` AS `name`,`studentUser`.`password` AS `password`,`studentUser`.`type` AS `type`,`studentUser`.`studentRealName` AS `realName`,`studentUser`.`status` AS `status` from `studentUser`) union all (select `teacherUser`.`name` AS `name`,`teacherUser`.`password` AS `password`,`teacherUser`.`type` AS `type`,`teacherUser`.`teacherRealName` AS `realName`,`teacherUser`.`status` AS `status` from `teacherUser`) ;
